from xmltodict import parse # interprets XML files like JSON files
import subprocess # allows to connect to input/output/error pipes of processes
from os import remove, listdir, rename, system, name
from xlrd import open_workbook
from csv import reader, writer, QUOTE_MINIMAL
from shutil import rmtree, move
from Bio import pairwise2
from Bio import Entrez # provides code to access NCBI over the Web
from argparse import ArgumentParser
from pathlib import Path # creates path
from pathlib import PurePath


# We define different useful paths
P_REP = str(PurePath('CRISPRbuilder-TB', 'REP'))
P_SEQUENCES = str(PurePath('CRISPRbuilder-TB', 'REP', 'sequences'))
P_CSV = str(PurePath('CRISPRbuilder-TB', 'data', 'lineage.csv'))
P_CSV_TMP = str(PurePath('CRISPRbuilder-TB', 'data', 'temp.csv'))
P_FASTA = str(PurePath('CRISPRbuilder-TB', 'tmp', 'snp.fasta'))
P_TXT_POSIX = 'CRISPRbuilder-TB/tmp/nb.txt'
P_TXT_WIN = 'C:\Windows\Temp\\nb.txt'

# We define the value of half the length of the reads we will work on.
DEMI_LONGUEUR = 20


# =======
# DATASET
# =======

Origines = [
    {'Source': "Requete SRA avec txid33894[Organism:exp] (M.tuberculosis variant "
               "africanum)",
     'Author': "NCBI",
     'study accession number': '',
     'run accessions': ['ERR2704812', 'ERR2704811', 'ERR2704810', 'ERR2704809', 'ERR2704808', 'SRR7496542', 'ERR2679282', 'ERR2679278', 'ERR2679258', 'ERR2679250', 'ERR2679246', 'ERR2383628', 'ERR2383627', 'ERR2383626', 'ERR2383625', 'ERR2383624', 'ERR2383623', 'ERR2383622', 'ERR2383621', 'ERR2383620', 'ERR2383619', 'ERR2383618', 'ERR2181458', 'SRR6046675', 'SRR6046695', 'SRR6046725', 'SRR6046334', 'SRR6046131', 'SRR6046235', 'SRR6045962', 'SRR6045604', 'SRR6045301', 'SRR6045425', 'SRR6045496', 'SRR6045027', 'SRR6044858', 'SRR6044939', 'SRR6045015', 'ERR019854', 'ERR019872', 'ERR017780', 'ERR017798', 'ERR026642', 'ERR1679637', 'SRR3647358', 'ERR1334053', 'ERR1334052', 'ERR1334051', 'ERR1334050', 'ERR1334049','ERR1215483', 'ERR1215482', 'ERR1215481', 'ERR1215480', 'ERR1215479', 'ERR1215478', 'ERR1215477', 'ERR1215476', 'ERR1215475', 'ERR1215474', 'ERR1215473', 'ERR1215472', 'ERR1215471', 'ERR1215470', 'ERR1215469', 'ERR1215468', 'ERR1215467', 'ERR1215466', 'ERR1215465', 'ERR1215464', 'ERR1215463', 'ERR1215462', 'ERR1215461', 'ERR1215460', 'ERR1203078', 'ERR1203077', 'ERR1203076', 'ERR1203075', 'ERR1203074', 'ERR1203073', 'ERR1203072', 'ERR1203071', 'ERR1203070', 'ERR1203069', 'ERR1203068', 'ERR1203067', 'ERR1203066', 'ERR1203065', 'ERR1203064', 'ERR1203063', 'ERR1203062', 'ERR1203061', 'ERR1203060', 'ERR1203059', 'ERR1203058', 'ERR1203057', 'ERR1203056', 'ERR1203055', 'ERR1203054', 'ERR1203053', 'ERR1203052', 'SRR3085279', 'ERR1082143', 'ERR1082142', 'ERR1082141', 'ERR1082140', 'ERR1082139', 'ERR1082138', 'ERR1082137', 'ERR1082136', 'ERR1082135', 'ERR1082134', 'ERR1082133', 'ERR1082132', 'ERR1082131', 'ERR1082130', 'ERR1082129', 'ERR1082128', 'ERR1082127', 'ERR1082126', 'ERR1082125', 'ERR1082124', 'ERR1082123', 'ERR1082122', 'ERR1082121', 'ERR1082120', 'ERR1082119', 'ERR1082118', 'ERR1082117', 'ERR1082116', 'ERR1082115', 'ERR1082114', 'ERR1082113', 'SRR2667443', 'ERR909754', 'ERR909753', 'ERR845916', 'ERR751349', 'ERR751348', 'ERR751347', 'ERR751346', 'ERR751345', 'ERR751344', 'ERR751343', 'ERR751342', 'ERR751341', 'ERR751340', 'ERR751339', 'ERR751338', 'ERR751337', 'ERR751336', 'ERR751335', 'ERR751334', 'ERR751333', 'ERR751332', 'ERR751331', 'ERR751330', 'ERR751329', 'ERR751328', 'ERR751327', 'ERR751326', 'ERR751325', 'ERR751324', 'ERR751323', 'ERR751322', 'ERR751321', 'ERR751320', 'ERR751319', 'ERR751318', 'ERR751317', 'ERR751316', 'ERR751315', 'ERR751314', 'ERR751313', 'ERR751312', 'ERR751311', 'ERR751310', 'ERR751309', 'ERR751308', 'ERR751307', 'ERR751306', 'ERR751305', 'ERR751304', 'ERR751303', 'ERR751302', 'ERR751301', 'ERR751300', 'ERR751299', 'ERR751298', 'ERR751297', 'ERR751296', 'ERR751295', 'ERR751294', 'ERR751293', 'ERR751292', 'ERR751291', 'ERR751290', 'ERR702414', 'ERR702413', 'ERR702412', 'ERR702411', 'ERR702410', 'ERR702409', 'ERR702408', 'ERR702407', 'ERR702406', 'ERR702405', 'ERR702404', 'ERR702403', 'ERR702402', 'ERR702401', 'ERR702400', 'ERR702399', 'ERR702437', 'ERR702436', 'ERR702435', 'ERR702434', 'ERR702433', 'ERR702432', 'ERR702431', 'ERR702430', 'ERR702429', 'ERR702428', 'ERR702427', 'ERR702426', 'ERR702425', 'ERR702424', 'ERR702423', 'ERR702422', 'ERR702421', 'ERR702420', 'ERR702419', 'ERR702418', 'ERR702417', 'ERR702416', 'ERR702415', 'ERR517472', 'ERR517471', 'ERR502538', 'ERR502537', 'ERR502536', 'ERR502535', 'ERR502534', 'ERR502533', 'ERR502532', 'ERR502531', 'ERR502530', 'ERR502529', 'ERR502528', 'ERR502527', 'ERR502526', 'ERR502525', 'ERR502524', 'ERR502523', 'ERR502522', 'ERR502521', 'ERR502520', 'ERR502519', 'ERR502518', 'ERR502517', 'ERR502516', 'ERR502515', 'ERR502514', 'ERR502513', 'ERR502512', 'ERR502511', 'ERR502510', 'ERR502509', 'ERR502508', 'ERR502507', 'ERR502506', 'ERR502505', 'ERR502504', 'ERR502503', 'ERR502502', 'ERR502501', 'ERR502500', 'ERR502499', 'ERR502498', 'ERR502497', 'ERR502496', 'ERR502495', 'ERR502494', 'ERR502493', 'ERR502492', 'ERR502491', 'ERR502490', 'ERR502489', 'ERR502488', 'ERR502487', 'ERR502486', 'ERR502485', 'ERR502484', 'ERR502483', 'ERR502482', 'ERR502481', 'ERR502480', 'ERR502479', 'ERR502478', 'ERR502477', 'ERR502476', 'ERR502475', 'ERR502474', 'ERR502473', 'ERR502472', 'ERR502471', 'ERR502470', 'SRR1735564', 'SRR1735577', 'SRR1735574', 'SRR1735569', 'SRR1577834', 'SRR1577833', 'SRR1577831', 'SRR1577828', 'SRR1577820', 'SRR1577819', 'SRR1162789', 'SRR1162788', 'SRR1162738', 'SRR1162716', 'SRR1162479', 'SRR1162477', 'SRR1162470', 'SRR1162469', 'SRR1103551', 'SRR1103499', 'SRR1103472', 'SRR1103387', 'SRR1057937', 'SRR1049960', 'SRR1049959', 'SRR1049958', 'SRR998743', 'SRR998740', 'SRR998741', 'SRR998742', 'SRR998655', 'SRR998652', 'SRR998654', 'SRR998653', 'SRR998648', 'SRR998650', 'SRR998651', 'SRR998649', 'SRR998646', 'SRR998647', 'SRR998645', 'SRR998644', 'SRR998640', 'SRR998641', 'SRR998642', 'SRR998643', 'SRR998637', 'SRR998638', 'SRR998636', 'SRR998639', 'SRR998631', 'SRR998628', 'SRR998629', 'SRR998630', 'SRR998626', 'SRR998624', 'SRR998625', 'SRR998627', 'SRR998621', 'SRR998620', 'SRR998622', 'SRR998623', 'SRR998619', 'SRR998616', 'SRR998617', 'SRR998618', 'SRR998612', 'SRR998614', 'SRR998613', 'SRR998615', 'SRR998611', 'SRR998608', 'SRR998610', 'SRR998609', 'SRR998604', 'SRR998605', 'SRR998606', 'SRR998607', 'SRR998601', 'SRR998603', 'SRR998600', 'SRR998602', 'SRR998596', 'SRR998597', 'SRR998598', 'SRR998599', 'SRR998594', 'SRR998592', 'SRR998593', 'SRR998595', 'SRR998584', 'SRR998587', 'SRR998586', 'SRR998585', 'SRR998580', 'SRR998583', 'SRR998582', 'SRR998581', 'SRR998578', 'SRR998576', 'SRR998579', 'SRR998577']},
    #
    {'Source': "Requete SRA avec txid78331[Organism:exp] (M.canettii)",
     'Author': "NCBI",
     'study accession number': '',
     'run accessions': ['SRR6650709', 'ERR015598', 'ERR1336826', 'ERR1336825',  'ERR1336824',  'ERR1336823',  'ERR1336822',  'ERR1336821',  'ERR1336820',  'ERR1043164',  'ERR1043163',  'ERR313117',  'ERR313116',  'ERR313115',  'ERR313114',  'ERR313113',  'ERR266126',  'ERR266125',  'ERR266124',  'ERR266123',  'ERR266122',  'ERR266121',  'ERR266120',  'ERR266110',  'ERR266109',  'ERR266108',  'ERR266107', 'ERR266106']},
    #
    {'Source': "Unexpected Genomic and Phenotypic Diversity of Mycobacterium africanum Lineage 5 Affects Drug Resistance, Protein Secretion, and Immunogenicity",
     'Author': "Ates et al. 2018",
     'study accession number': 'PRJEB25506',
     'run accessions': ['ERR2383618', 'ERR2383619', 'ERR2383620', 'ERR2383621', 'ERR2383622', 'ERR2383623', 'ERR2383624', 'ERR2383625', 'ERR2383626', 'ERR2383627', 'ERR2383628', 'ERR2704808', 'ERR2704809', 'ERR2704810', 'ERR2704812']},
    #
    {'Source': "Genomic characterization of Mycobacterium tuberculosis lineage 7 and a proposed name: 'Aethiops vetus'",
     'Author': "Nebenzahl-Guimaraes H, Yimer S, Holm-Hansen C, de Beer J, Brosch R, van Soolingen D",
     'study accession number': 'PRJEB8432',
     'run accessions': ['ERR756344', 'ERR756345', 'ERR756346', 'ERR756347', 'ERR756348']},
    #
    {'Source': "Analysis of IS6110 insertion sites provide a glimpse into genome evolution of Mycobacterium tuberculosis",
     'Author': "Roychowdhury T, Mandal S, Bhattacharya A",
     'study accession number': '',
     'run accessions},
    #
     {'Source': "Global expansion of Mycobacterium tuberculosis lineage 4 shaped by colonial migration and local adaptation",
     'Author': "Brynildsrud et al.",
     'study accession number': '',
     'run accessions': ['ERR760595', 'ERR760596', 'ERR760597', 'ERR760598', 'ERR760599', 'ERR760600', 'ERR760601', 'ERR760602', 'ERR757162', 'ERR757163', 'ERR757164', 'ERR760603', 'ERR760604', 'ERR757165', 'ERR760605', 'ERR757166', 'ERR757167', 'ERR850262', 'ERR760607', 'ERR760608', 'ERR760609', 'ERR760610', 'ERR760611', 'ERR760612', 'ERR760731', 'ERR757168', 'ERR760732', 'ERR757169', 'ERR760733', 'ERR757170', 'ERR757171', 'ERR757172', 'ERR760734', 'ERR757173', 'ERR757174', 'ERR757175', 'ERR760735', 'ERR757176', 'ERR757177', 'ERR760736', 'ERR757178', 'ERR757179', 'ERR757180', 'ERR757181', 'ERR757182', 'ERR760737', 'ERR760738', 'ERR757183', 'ERR757184', 'ERR850078', 'ERR757185', 'ERR760739', 'ERR757186', 'ERR760740', 'ERR760741', 'ERR760742', 'ERR760743', 'ERR760744', 'ERR757187', 'ERR760745', 'ERR760746', 'ERR760747', 'ERR757188', 'ERR760748', 'ERR760749', 'ERR760750', 'ERR760751', 'ERR760752', 'ERR760753', 'ERR760754', 'ERR757189', 'ERR760755', 'ERR760809', 'ERR760756', 'ERR760757', 'ERR760758', 'ERR760759', 'ERR760760', 'ERR760761', 'ERR760762', 'ERR760763', 'ERR760764', 'ERR760765', 'ERR760766', 'ERR760767', 'ERR760768', 'ERR845303', 'ERR845303', 'ERR845304', 'ERR845305', 'ERR845305', 'ERR845306', 'ERR760810', 'ERR845307', 'ERR845307', 'ERR845308', 'ERR845308', 'ERR845327', 'ERR845327', 'ERR760811', 'ERR760812', 'ERR760813', 'ERR760814', 'ERR845328', 'ERR845328', 'ERR845329', 'ERR845329', 'ERR762352', 'ERR760778', 'ERR760815', 'ERR760779', 'ERR760780', 'ERR760781', 'ERR760782', 'ERR760783', 'ERR760780', 'ERR760784', 'ERR760785', 'ERR760786', 'ERR760787', 'ERR760788', 'ERR760789', 'ERR760790', 'ERR760791', 'ERR760816', 'ERR760792', 'ERR760793', 'ERR760794', 'ERR760795', 'ERR760817', 'ERR760818', 'ERR760796', 'ERR757151', 'ERR760797', 'ERR760798', 'ERR762353', 'ERR762353', 'ERR760799', 'ERR760800', 'ERR760801', 'ERR760802', 'ERR760803', 'ERR760819', 'ERR760820', 'ERR760821', 'ERR760822', 'ERR760823', 'ERR760824', 'ERR757159', 'ERR760825', 'ERR757160', 'ERR760826', 'ERR760827', 'ERR760828', 'ERR757161', 'ERR760829', 'ERR760830', 'ERR760831', 'ERR760832', 'ERR760833', 'ERR760834', 'ERR760835', 'ERR760836', 'ERR760837', 'ERR760838', 'ERR760839', 'ERR760840', 'ERR760841', 'ERR760842', 'ERR760843', 'ERR760844', 'ERR760845', 'ERR757152', 'ERR760846', 'ERR760847', 'ERR760848', 'ERR760849', 'ERR760850', 'ERR760851', 'ERR757146', 'ERR760852', 'ERR760853', 'ERR760854', 'ERR760855', 'ERR760856', 'ERR760857', 'ERR760858', 'ERR760859', 'ERR760860', 'ERR760861', 'ERR760862', 'ERR760863', 'ERR760864', 'ERR760865', 'ERR760866', 'ERR760867', 'ERR760868', 'ERR760869', 'ERR760870', 'ERR760871', 'ERR760872', 'ERR760873', 'ERR760874', 'ERR760875', 'ERR760876', 'ERR760877', 'ERR760878', 'ERR760879', 'ERR760880', 'ERR760881', 'ERR760882', 'ERR760883', 'ERR760884', 'ERR760885', 'ERR760886', 'ERR760887', 'ERR760888', 'ERR760889', 'ERR760890', 'ERR760891', 'ERR760892', 'ERR760893', 'ERR760894', 'ERR760895', 'ERR760896', 'ERR760897', 'ERR845330', 'ERR760899', 'ERR760900', 'ERR760901', 'ERR760902', 'ERR760903', 'ERR760904', 'ERR760905', 'ERR760906', 'ERR760907', 'ERR760908', 'ERR760909', 'ERR760910', 'ERR760911', 'ERR760912', 'ERR760913', 'ERR760914', 'ERR760915', 'ERR760916', 'ERR760917', 'ERR760918', 'ERR760919', 'ERR760920', 'ERR760921', 'ERR760922', 'ERR760923', 'ERR760924', 'ERR760925', 'ERR757145', 'ERR757147', 'ERR757148', 'ERR757150', 'ERR760926', 'ERR760927', 'ERR776665', 'ERR772257', 'ERR772254', 'ERR776452', 'ERR776453', 'ERR776454', 'ERR772258', 'ERR776455', 'ERR776456', 'ERR776457', 'ERR776458', 'ERR776459', 'ERR776460', 'ERR776659', 'ERR776461', 'ERR776462', 'ERR776463', 'ERR776464', 'ERR772259', 'ERR776465', 'ERR776466', 'ERR776467', 'ERR776468', 'ERR776469', 'ERR776660', 'ERR776470', 'ERR776471', 'ERR776472', 'ERR776473', 'ERR772260', 'ERR776474', 'ERR772261', 'ERR772262', 'ERR776475', 'ERR776476', 'ERR772255', 'ERR776666', 'ERR776667', 'ERR776668', 'ERR776669', 'ERR776670', 'ERR776671', 'ERR772263', 'ERR776672', 'ERR776673', 'ERR776674', 'ERR776661', 'ERR772264', 'ERR776675', 'ERR772265', 'ERR776662', 'ERR776663', 'ERR772256', 'ERR776664', 'ERR2652988', 'ERR2652989', 'ERR2652990', 'ERR2652991', 'ERR2652992', 'ERR2652993', 'ERR2652994', 'ERR2652995', 'ERR2652996', 'ERR2652997', 'ERR2652998', 'ERR2652976', 'ERR2652999', 'ERR2653088', 'ERR2653087', 'ERR2653086', 'ERR2653085', 'ERR2653084', 'ERR2653083', 'ERR2652980', 'ERR2653082', 'ERR2653081', 'ERR2652977', 'ERR2653080', 'ERR2653079', 'ERR2653078', 'ERR2653077', 'ERR2653076', 'ERR2653089', 'ERR2653090', 'ERR2653091', 'ERR2652978', 'ERR2653092', 'ERR2653093', 'ERR2653094', 'ERR2653095', 'ERR2653096', 'ERR2653097', 'ERR2653098', 'ERR2653099', 'ERR2653100', 'ERR2652979', 'ERR2653101', 'ERR2653102', 'ERR2653103', 'ERR2653104', 'ERR2653105', 'ERR2653106', 'ERR2653107', 'ERR2653108', 'ERR2653000', 'ERR2653109', 'ERR2653110', 'ERR2653111', 'ERR2653112', 'ERR2653113', 'ERR2653114', 'ERR2653115', 'ERR2653116', 'ERR2653117', 'ERR2653118', 'ERR2653001', 'ERR2653168', 'ERR2653169', 'ERR2653170', 'ERR2653171', 'ERR2653172', 'ERR2653173', 'ERR2653174', 'ERR2653175', 'ERR2653002', 'ERR2653176', 'ERR2653177', 'ERR2653178', 'ERR2653179', 'ERR2653180', 'ERR2653181', 'ERR2653182', 'ERR2653003', 'ERR2653183', 'ERR2653184', 'ERR2653185', 'ERR2653186', 'ERR2653187', 'ERR2653188', 'ERR2653189', 'ERR2653190', 'ERR2653004', 'ERR2653191', 'ERR2653192', 'ERR2653193', 'ERR2653194', 'ERR2653195', 'ERR2653196', 'ERR2653197', 'ERR2653005', 'ERR2653198', 'ERR2653199', 'ERR2653200', 'ERR2653119', 'ERR2653120', 'ERR2653121', 'ERR2653122', 'ERR2653123', 'ERR2653124', 'ERR2653006', 'ERR2653125', 'ERR2653126', 'ERR2653127', 'ERR2653128', 'ERR2653129', 'ERR2653130', 'ERR2653131', 'ERR2653132', 'ERR2652981', 'ERR2653133', 'ERR2653134', 'ERR2653007', 'ERR2653135', 'ERR2653136', 'ERR2653137', 'ERR2653138', 'ERR2653139', 'ERR2653140', 'ERR2653141', 'ERR2653142', 'ERR2653143', 'ERR2653008', 'ERR2653144', 'ERR2653145', 'ERR2653146', 'ERR2653147', 'ERR2653148', 'ERR2653149', 'ERR2653150', 'ERR2653151', 'ERR2653152', 'ERR2653009', 'ERR2653153', 'ERR2653154', 'ERR2653155', 'ERR2653156', 'ERR2653157', 'ERR2653158', 'ERR2653159', 'ERR2653160', 'ERR2653161', 'ERR2653010', 'ERR2653162', 'ERR2653163', 'ERR2653164', 'ERR2653165', 'ERR2653166', 'ERR2653167', 'ERR2653201', 'ERR2653212', 'ERR2653223', 'ERR2653011', 'ERR2653233', 'ERR2653237', 'ERR2653238', 'ERR2653239', 'ERR2653240', 'ERR2653241', 'ERR2653202', 'ERR2653203', 'ERR2653204', 'ERR2653012', 'ERR2653205', 'ERR2653206', 'ERR2653207', 'ERR2653208', 'ERR2653209', 'ERR2653210', 'ERR2653211', 'ERR2653213', 'ERR2653214', 'ERR2653215', 'ERR2653013', 'ERR2653216', 'ERR2653217', 'ERR2653218', 'ERR2653219', 'ERR2653220', 'ERR2653221', 'ERR2653222', 'ERR2653224', 'ERR2653225', 'ERR2653014', 'ERR2653226', 'ERR2653227', 'ERR2653228', 'ERR2653229', 'ERR2653230', 'ERR2653231', 'ERR2653232', 'ERR2653234', 'ERR2653015', 'ERR2653235', 'ERR2653236', 'ERR2653016', 'ERR2652982', 'ERR2653017', 'ERR2653018', 'ERR2653019', 'ERR2653020', 'ERR2653021', 'ERR2653022', 'ERR2653023', 'ERR2653024', 'ERR2653025', 'ERR2652983', 'ERR2653026', 'ERR2653027', 'ERR2653028', 'ERR2653029', 'ERR2653030', 'ERR2653031', 'ERR2653032', 'ERR2653033', 'ERR2653034', 'ERR2652984', 'ERR2653035', 'ERR2653036', 'ERR2653037', 'ERR2653038', 'ERR2653039', 'ERR2653040', 'ERR2653041', 'ERR2653042', 'ERR2653043', 'ERR2652985', 'ERR2653044', 'ERR2653045', 'ERR2653046', 'ERR2653047', 'ERR2653048', 'ERR2653049', 'ERR2653050', 'ERR2653051', 'ERR2653052', 'ERR2653053', 'ERR2653054', 'ERR2653055', 'ERR2653056', 'ERR2653057', 'ERR2653058', 'ERR2653059', 'ERR2653060', 'ERR2652986', 'ERR2653061', 'ERR2653062', 'ERR2653063', 'ERR2653064', 'ERR2653065', 'ERR2653066', 'ERR2653067', 'ERR2653068', 'ERR2653069', 'ERR2652987', 'ERR2653070', 'ERR2653071', 'ERR2653072', 'ERR2653073', 'ERR2653074', 'ERR2653075', 'ERR2652926', 'ERR2652925', 'ERR2652927', 'ERR2652928', 'ERR2652929', 'ERR2652930', 'ERR2652931', 'ERR2652932', 'ERR2652933', 'ERR2652934', 'ERR2652935', 'ERR2652936', 'ERR2652937', 'ERR2652938', 'ERR2652939', 'ERR2652940', 'ERR2652941', 'ERR2652942', 'ERR2652943', 'ERR2652944', 'ERR2652945', 'ERR2652946', 'ERR2652947', 'ERR2652948', 'ERR2652949', 'ERR2652950', 'ERR2652951', 'ERR2652952', 'ERR2652953', 'ERR2652954', 'ERR2652955', 'ERR2652956', 'ERR2652957', 'ERR2652958', 'ERR2652959', 'ERR2652961', 'ERR2652960', 'ERR2652962', 'ERR2652963', 'ERR2652964', 'ERR2652965', 'ERR2652966', 'ERR2652967', 'ERR2652968', 'ERR2652969', 'ERR2652970', 'ERR2652971', 'ERR2652972', 'ERR2652973', 'ERR2652974', 'ERR2652975', 'ERR551789', 'ERR551791', 'ERR551583', 'ERR553103', 'ERR550723', 'ERR552392', 'ERR552393', 'ERR551929', 'ERR553057', 'ERR552529', 'ERR552617', 'ERR552618', 'ERR550798', 'ERR552192', 'ERR551590', 'ERR553229', 'ERR553151', 'ERR551502', 'ERR553306', 'ERR551820', 'ERR552919', 'ERR553317', 'ERR551676', 'ERR551677', 'ERR551092', 'ERR551354', 'ERR551073', 'ERR551416', 'ERR551961', 'ERR550819', 'ERR551950', 'ERR551253', 'ERR551587', 'ERR552492', 'ERR551075', 'ERR551076', 'ERR550775', 'ERR550622', 'ERR552592', 'ERR550939', 'ERR553370', 'ERR552643', 'ERR551367', 'ERR550697', 'ERR551039', 'ERR551597', 'ERR553380', 'ERR551808', 'ERR553004', 'ERR552448', 'ERR551685', 'ERR552634', 'ERR550879', 'ERR551687', 'ERR553104', 'ERR553087', 'ERR551359', 'ERR553316', 'ERR552869', 'ERR551404', 'ERR553041', 'ERR979062', 'ERR979063', 'ERR979065', 'ERR979066', 'ERR979067', 'ERR979068', 'ERR979069', 'ERR979070', 'ERR979071', 'ERR979072', 'ERR979073', 'ERR979074', 'ERR979075', 'ERR245649', 'ERR245650', 'ERR245653', 'ERR245658', 'ERR245659', 'ERR245661', 'ERR245664', 'ERR245665', 'ERR245666', 'ERR245667', 'ERR245673', 'ERR245681', 'ERR245683', 'ERR245685', 'ERR245686', 'ERR245690', 'ERR245693', 'ERR245697', 'ERR245700', 'ERR245701', 'ERR245706', 'ERR245707', 'ERR245708', 'ERR245709', 'ERR245711', 'ERR245712', 'ERR245714', 'ERR245718', 'ERR245719', 'ERR245724', 'ERR245725', 'ERR245729', 'ERR245730', 'ERR245731', 'ERR245733', 'ERR245736', 'ERR245737', 'ERR245738', 'ERR245740', 'ERR245741', 'ERR245743', 'ERR245744', 'ERR245745', 'ERR245746', 'ERR245749', 'ERR245750', 'ERR245752', 'ERR245755', 'ERR245756', 'ERR245758', 'ERR245759', 'ERR028608', 'ERR028628', 'ERR029204', 'ERR028620', 'ERR028621', 'ERR029201', 'ERR257886', 'ERR023747', 'ERR024355', 'ERR025431', 'ERR025450', 'ERR025453', 'ERR025458', 'ERR025438', 'ERR024345', 'ERR023759', 'ERR023764', 'ERR024340', 'ERR025422', 'ERR025423', 'ERR025433', 'ERR025457', 'ERR023737', 'ERR025428', 'ERR257909', 'ERR024343', 'ERR023738', 'ERR026472', 'ERR025441', 'ERR023731', 'ERR025424', 'ERR025415', 'ERR257880', 'ERR025454', 'ERR024344', 'ERR025460', 'ERR024346', 'ERR257891', 'ERR023757', 'ERR024347', 'ERR023760', 'ERR025434', 'ERR257892', 'ERR257910', 'ERR025435', 'ERR025459', 'ERR257893', 'ERR025451', 'ERR257894', 'ERR257895', 'ERR025436', 'ERR025427', 'ERR025455', 'ERR257931', 'ERR257932', 'ERR023761', 'ERR025440', 'ERR025432', 'ERR023739', 'ERR025420', 'ERR023740', 'ERR257896', 'ERR257897', 'ERR257898', 'ERR257911', 'ERR257912', 'ERR257899', 'ERR257915', 'ERR023732', 'ERR257900', 'ERR257901', 'ERR023758', 'ERR025421', 'ERR257902', 'ERR257903', 'ERR257904', 'ERR257917', 'ERR257933', 'ERR257934', 'ERR257905', 'ERR257906', 'ERR025414', 'ERR025417', 'ERR025418', 'ERR025419', 'ERR023729', 'ERR257907', 'ERR025452', 'ERR257935', 'ERR023746', 'ERR026475', 'ERR025426', 'ERR025456', 'ERR025416', 'ERR025429', 'ERR026476', 'ERR025430', 'ERR257908', 'ERR024359', 'ERR028610', 'ERR028613', 'ERR028612', 'ERR028615', 'ERR028616', 'ERR028617', 'ERR028622', 'ERR029211', 'ERR029202', 'ERR028624', 'ERR028626', 'ERR028625', 'ERR028629', 'ERR751351', 'ERR751354', 'ERR751355', 'ERR751357', 'ERR751359', 'ERR751362', 'ERR751363', 'ERR751365', 'ERR751367', 'ERR751368', 'ERR751372', 'ERR751373', 'ERR751374', 'ERR751375', 'ERR751377', 'ERR751382', 'ERR751384', 'ERR751387', 'ERR751389', 'ERR751394', 'ERR751399', 'ERR751400', 'ERR751401', 'ERR751402', 'ERR751403', 'ERR751406', 'ERR751409', 'ERR751415', 'ERR751416', 'ERR751417', 'ERR751418', 'ERR751423', 'ERR751424', 'ERR751425', 'ERR751426', 'ERR751427', 'ERR751429', 'ERR751431', 'ERR751434', 'ERR751435', 'ERR751436', 'ERR751437', 'ERR751439', 'ERR751442', 'ERR751444', 'ERR751445', 'ERR751446', 'ERR751448', 'ERR751449', 'ERR751450', 'ERR751455', 'ERR751456', 'ERR751457', 'ERR751458', 'ERR751459', 'ERR751460', 'ERR751462', 'ERR751463', 'ERR751468', 'ERR751469', 'ERR751472', 'ERR751474', 'ERR751476', 'ERR751477', 'ERR751480', 'ERR751482', 'ERR751485', 'ERR751487', 'ERR751489', 'ERR751492', 'ERR751494', 'ERR751496', 'ERR751498', 'ERR751499', 'ERR751500', 'ERR751501', 'ERR751504', 'ERR751507', 'ERR751508', 'ERR751509', 'ERR751511', 'ERR751512', 'ERR751513', 'ERR751515', 'ERR751523', 'ERR751524', 'ERR751528', 'ERR751530', 'ERR751533', 'ERR751535', 'ERR751536', 'ERR751538', 'ERR751541', 'ERR751542', 'ERR751543', 'ERR751544', 'ERR751545', 'ERR751547', 'ERR751548', 'ERR751549', 'ERR751550', 'ERR751551', 'ERR751553', 'ERR751554', 'ERR751556', 'ERR751557', 'ERR751559', 'ERR751560', 'ERR751561', 'ERR751562', 'ERR751563', 'ERR751564', 'ERR751565', 'ERR751566', 'ERR751567', 'ERR751568', 'ERR751569', 'ERR751570', 'ERR751571', 'ERR751572', 'ERR751573', 'ERR751574', 'ERR751578', 'ERR751580', 'ERR751581', 'ERR751582', 'ERR751585', 'ERR751586', 'ERR751587', 'ERR751589', 'ERR751592', 'ERR751593', 'ERR751595', 'ERR751596', 'ERR751597', 'ERR751598', 'ERR751599', 'ERR751600', 'ERR751604', 'ERR751605', 'ERR751606', 'ERR751607', 'ERR751608', 'ERR751609', 'ERR751612', 'ERR751614', 'ERR751616', 'ERR751617', 'ERR751619', 'ERR751621', 'ERR751622', 'ERR751623', 'ERR751624', 'ERR751626', 'ERR751628', 'ERR751629', 'ERR751630', 'ERR751631', 'ERR751633', 'ERR775293', 'ERR775294', 'ERR775296', 'ERR775299', 'ERR775300', 'ERR775302', 'ERR775305', 'ERR775311', 'ERR775315', 'ERR775316', 'ERR775317', 'ERR775318', 'ERR775326', 'ERR775328', 'ERR775329', 'ERR775330', 'ERR775331', 'ERR775332', 'ERR775336', 'ERR775337', 'ERR775338', 'ERR775340', 'ERR775342', 'ERR775345', 'ERR775348', 'ERR775350', 'ERR775351', 'ERR775353', 'ERR775354', 'ERR775357', 'ERR775358', 'ERR775360', 'ERR775361', 'ERR775365', 'ERR775367', 'ERR775369', 'ERR775371', 'ERR775372', 'ERR775374', 'ERR775383', 'ERR775387', 'ERR775388', 'ERR779842', 'ERR779844', 'ERR779847', 'ERR779848', 'ERR779850', 'ERR779854', 'ERR779855', 'ERR779858', 'ERR779860', 'ERR779861', 'ERR779864', 'ERR779865', 'ERR779867', 'ERR779868', 'ERR779869', 'ERR779870', 'ERR779871', 'ERR779873', 'ERR779874', 'ERR779875', 'ERR779877', 'ERR779878', 'ERR779880', 'ERR779884', 'ERR779885', 'ERR779886', 'ERR779887', 'ERR779890', 'ERR779892', 'ERR779895', 'ERR779897', 'ERR779898', 'ERR779900', 'ERR779901', 'ERR779902', 'ERR779906', 'ERR779907', 'ERR779908', 'ERR779909', 'ERR779911', 'ERR779912', 'ERR779915', 'ERR779917', 'ERR779921', 'ERR779922', 'ERR779925', 'ERR845937', 'ERR845941', 'ERR275181', 'ERR275182', 'ERR275183', 'ERR275184', 'ERR275185', 'ERR275186', 'ERR275187', 'ERR275189', 'ERR275190', 'ERR275191', 'ERR275192', 'ERR275193', 'ERR275195', 'ERR275196', 'ERR275197', 'ERR275198', 'ERR275199', 'ERR275200', 'ERR275201', 'ERR275202', 'ERR275203', 'ERR275204', 'ERR275206', 'ERR275207', 'ERR275208', 'ERR275209', 'ERR275210', 'ERR275211', 'ERR275212', 'ERR275213', 'ERR275214', 'ERR275217', 'ERR275218', 'ERR275219', 'ERR275220', 'ERR275221', 'ERR275222', 'ERR275223', 'ERR275224', 'ERR275225', 'ERR275227', 'ERR275228', 'ERR275229', 'ERR275230', 'ERR275231', 'ERR275232', 'ERR275233', 'ERR275234', 'ERR275235', 'ERR275236', 'SRR1186316', 'SRR1186993', 'SRR1187001', 'SRR1187011', 'SRR1187028', 'SRR1187037', 'SRR1187076', 'SRR1187082', 'SRR1187085', 'SRR1187086', 'SRR1187087', 'SRR1187088', 'SRR1187089', 'SRR1187181', 'SRR1187183', 'SRR1187184', 'SRR1187186', 'SRR1187192', 'SRR1187195', 'SRR1187196', 'SRR1187251', 'SRR1187252', 'SRR1187295', 'SRR1187297', 'SRR1187380', 'SRR1187393', 'SRR1187423', 'SRR1187442', 'SRR1187576', 'SRR1187598', 'SRR1187618', 'SRR1187619', 'SRR1187620', 'SRR1187627', 'SRR1187628', 'SRR1187629', 'SRR1187630', 'SRR1187631', 'SRR1187633', 'SRR1187945', 'SRR1187946', 'SRR1187983', 'SRR1188082', 'SRR1188083', 'SRR1188084', 'SRR1188085', 'SRR1188086', 'SRR1188087', 'SRR1188119', 'SRR1188121', 'SRR1188127', 'SRR1188130', 'SRR1188131', 'SRR1188133', 'SRR1188137', 'SRR1188138', 'SRR1188143', 'SRR1188170', 'SRR1188174', 'SRR1188175', 'SRR1188181', 'SRR1188183', 'SRR1188184', 'SRR1188188', 'SRR1188220', 'SRR1188259', 'SRR1188284', 'SRR1188286', 'SRR1188339', 'SRR1188341', 'SRR1188343', 'SRR1188359', 'SRR1188439', 'SRR1188459', 'SRR1188479', 'SRR1188486', 'SRR1188487', 'SRR1188492', 'SRR1188530', 'SRR1190432', 'SRR1190434', 'SRR1190442', 'SRR1190468', 'SRR1190470', 'SRR1190473', 'SRR1190474', 'SRR1190475', 'SRR1190477', 'SRR1190478', 'SRR1190480', 'SRR1191277', 'SRR1191298', 'SRR1191488', 'SRR1191489', 'SRR1191546', 'SRR1191547', 'SRR1191666', 'SRR1191727', 'SRR1200251', 'SRR1367198', 'SRR1367199', 'SRR1367200', 'SRR1640242', 'SRR1640246', 'SRR1640250', 'SRR1640253', 'SRR1640254', 'SRR1640266', 'SRR1640273', 'SRR1640287', 'SRR1640289', 'SRR1640290', 'SRR1640291', 'SRR1640292', 'SRR1640293', 'SRR1640294', 'SRR1640295', 'SRR1640316', 'SRR1640321', 'SRR1640326', 'SRR1640327', 'SRR1640334', 'SRR1640335', 'SRR1640336', 'SRR1640338', 'SRR1640340', 'SRR1640342', 'SRR1640343', 'SRR1640345', 'SRR1640346', 'SRR1640347', 'SRR1640348', 'SRR1640349', 'SRR1640539', 'SRR1640540', 'SRR1640541', 'SRR1640542', 'SRR1640543', 'SRR1640547', 'SRR1640549', 'SRR1640551', 'SRR1640562', 'SRR1640563', 'SRR1640564', 'SRR1640565', 'SRR1640566', 'SRR1640567', 'SRR1640569', 'SRR1640570', 'SRR1640571', 'SRR1640574', 'SRR1640696', 'SRR1640697', 'SRR1640701', 'SRR1640706', 'SRR1640707', 'SRR1640708', 'SRR1640709', 'SRR1640710', 'SRR1640711', 'SRR1640712', 'SRR1640713', 'SRR1640714', 'SRR1640749', 'SRR1640751', 'SRR1640752', 'ERR067614', 'ERR067615', 'ERR067616', 'ERR067617', 'ERR067601', 'ERR067602', 'ERR067767', 'ERR067719', 'ERR067577', 'ERR067579', 'ERR067585', 'ERR067607', 'ERR067603', 'ERR067609', 'ERR067606', 'ERR067612', 'ERR067693', 'ERR067697', 'ERR067735', 'ERR067737', 'ERR067624', 'ERR067747', 'ERR067725', 'ERR067726', 'ERR067727', 'ERR067629', 'ERR067748', 'ERR067751', 'ERR067591', 'ERR067752', 'ERR067753', 'ERR067756', 'ERR067757', 'ERR067728', 'ERR067729', 'ERR067730', 'ERR067731', 'ERR067732', 'ERR067763', 'ERR067733', 'ERR067734', 'ERR067596', 'ERR067597', 'ERR067599', 'ERR017793', 'ERR017800', 'ERR027469', 'ERR067657', 'ERR067658', 'ERR067661', 'ERR067664', 'ERR067666', 'ERR067636', 'ERR067670', 'ERR067640', 'ERR067645', 'ERR067675', 'ERR067632', 'ERR067634', 'ERR067676', 'ERR067677', 'ERR067678', 'ERR067679', 'ERR067700', 'ERR067703', 'ERR067706', 'ERR067708', 'ERR067716', 'ERR067680', 'ERR067682', 'ERR067683', 'ERR067684', 'ERR067685', 'ERR067690', 'ERR067691', 'SRR1047970', 'SRR1047971', 'SRR1047972', 'SRR833028', 'SRR833121', 'SRR833024', 'SRR832991', 'SRR833109', 'SRR924700', 'SRR924701', 'SRR924707', 'SRR1011465', 'SRR1180299', 'SRR1140950', 'ERR040113', 'ERR040116', 'ERR040117', 'ERR040128', 'ERR040130', 'ERR040142', 'ERR040125', 'ERR038740', 'ERR040120', 'ERR040122', 'ERR040124', 'ERR040127', 'ERR038739', 'ERR040131', 'ERR040132', 'ERR040134', 'ERR040135', 'ERR040138', 'ERR038744', 'ERR038736', 'ERR038737', 'ERR038738', 'ERR038741', 'ERR038742', 'ERR038745', 'ERR038747', 'ERR038748', 'ERR038749', 'ERR038750', 'ERR038754', 'ERR017794', 'ERR027464', 'ERR017798', 'ERR017797', 'ERR019871', 'ERR047885', 'ERR047886', 'ERR047881', 'ERR2652914', 'ERR2652915', 'ERR2652916', 'ERR2652917', 'ERR2652918', 'ERR2652919', 'ERR2652920', 'ERR2652921', 'ERR2652922', 'ERR2652923', 'ERR2652924', 'SRR5065225', 'SRR5065416', 'SRR5065335', 'SRR5065239', 'SRR5065316', 'SRR5065690', 'SRR5065701', 'SRR5065252', 'SRR5065396', 'SRR5065659', 'SRR5065476', 'SRR5065417', 'SRR5065263', 'SRR5065329', 'SRR5065248', 'SRR5065206', 'SRR5065539', 'SRR5065214', 'SRR5065577', 'SRR5065517', 'SRR5065578', 'SRR5065246', 'SRR5065571', 'SRR5065374', 'SRR5065602', 'SRR5065408', 'SRR5065267', 'SRR5065508', 'SRR5065649', 'SRR5065276', 'SRR5065363', 'SRR5065254', 'SRR5065546', 'SRR5065463', 'SRR5065639', 'SRR5065677', 'SRR5065242', 'SRR5065490', 'SRR5065399', 'SRR5065244', 'SRR5065455', 'SRR5065622', 'SRR5065279', 'SRR5065629', 'SRR5065453', 'SRR5065454', 'SRR5065493', 'SRR5065268', 'SRR5065233', 'SRR5065636', 'SRR5065323', 'SRR5065657', 'SRR5065492', 'SRR5065597', 'SRR5065542', 'SRR5065540', 'SRR5065295', 'SRR5065203', 'SRR5065230', 'SRR5065698', 'SRR5065223', 'SRR5067382', 'SRR5067284', 'SRR5067463', 'SRR5067225', 'SRR5067685', 'SRR5067274', 'SRR5067602', 'SRR5067634', 'SRR5067508', 'SRR5067377', 'SRR5067671', 'SRR5067625', 'SRR5067680', 'SRR5067621', 'SRR5067559', 'SRR5067224', 'SRR5067473', 'SRR5067407', 'SRR5067355', 'SRR5067358', 'SRR5067287', 'SRR5067652', 'SRR5067515', 'SRR5067303', 'SRR5067578', 'SRR5067575', 'SRR5067398', 'SRR5067361', 'SRR5067363', 'SRR5067435', 'SRR5067395', 'SRR5067384', 'SRR5067281', 'SRR5067577', 'SRR5067674', 'SRR5067622', 'SRR5067263', 'SRR5067389', 'SRR5067507', 'SRR5067656', 'SRR5067459', 'SRR5067534', 'SRR5067589', 'SRR5067418', 'SRR5067267', 'SRR5067392', 'SRR5067615', 'SRR5067497', 'SRR5067569', 'SRR5067415', 'SRR5067427', 'SRR5067394', 'SRR5067604', 'SRR5067373', 'SRR5067709', 'SRR5073561', 'SRR5073580', 'SRR5073785', 'SRR5073667', 'SRR5073565', 'SRR5073896', 'SRR5073887', 'SRR5073871', 'SRR5073733', 'SRR5073502', 'SRR5073729', 'SRR5073715', 'SRR5073877', 'SRR5073572', 'SRR5073979', 'SRR5073640', 'SRR5073566', 'SRR5073908', 'SRR5073855', 'SRR5073876', 'SRR5073781', 'SRR5073989', 'SRR5073620', 'SRR5073934', 'SRR5073957', 'SRR5073693', 'SRR5073947', 'SRR5073609', 'SRR5073811', 'SRR5073788', 'SRR5073837', 'SRR5073784', 'SRR5073746', 'SRR5073553', 'SRR5073825', 'SRR5073894', 'SRR5073700', 'SRR5073897', 'SRR5073960', 'SRR5073765', 'SRR5073827', 'SRR5073817', 'SRR5073842', 'SRR5073556', 'SRR5073978', 'SRR5073981', 'SRR5073910', 'SRR5073529', 'SRR5073624', 'SRR5073688', 'SRR5073804', 'SRR5073991', 'SRR5073966', 'SRR5073805', 'SRR5073950', 'SRR5073516', 'SRR5073711', 'SRR5073999', 'SRR5073770', 'SRR5073940', 'SRR5073627', 'SRR5073675', 'SRR5073623', 'SRR5074192', 'SRR5074109', 'SRR5074178', 'SRR5074072', 'SRR5074190', 'SRR5074142', 'SRR5074075', 'SRR5074165', 'SRR5074111', 'SRR5074187', 'SRR5074141', 'SRR5074102', 'ERR650569', 'ERR651000', 'ERR651004', 'SRR1188186']},
    #
     {'Source': "Genetic diversity of Lineage 7 isolates in Ethiopia",
     'Author': "University of Oslo",
     'study accession number': 'PRJEB13960',
     'location': 'Ethiopia',
     'run accessions': ['ERR1971849', 'ERR1971850', 'ERR1971852', 'ERR1971853', 'ERR1971854', 'ERR1971855', 'ERR1971856', 'ERR1971857', 'ERR1971858', 'ERR1971859', 'ERR1971860', 'ERR1971861', 'ERR1971862', 'ERR1971863', 'ERR1971864', 'ERR1971865', 'ERR1971866', 'ERR1971867', 'ERR1971868', 'ERR1971869', 'ERR1971870', 'ERR1971871', 'ERR1971872', 'ERR1971873', 'ERR1971874', 'ERR1971876', 'ERR1971877']},
    #
     {'Source': "Tuberculosis isolates from patients in Ethiopia that represents a new lineage (Lineage 7)",
     'Author': "CSISP",
     'study accession number': 'PRJEB3124',
     'location': 'Ethiopia',
     'run accessions': ['ERR159958', 'ERR159959']},
    #
     {'Source': "Norwegian-African large Lineage 3 M. tuberculosis cluster",
     'Author': "Norwegian institute of public health",
     'study accession number': 'PRJEB23495',
     'run accessions},
    #
     {'Source': "Sequencing of ancient DNA of Mycobacterium tuberculosis from archaeological specimens",
     'Author': "UOM",
     'study accession number': 'PRJEB3329',
     'run accessions': ['ERR179757']},
      #
     {'Source': "Multidrug and extensively drug resistant tuberculosis among refugees, migrant workers and residents in Lebanon",
     'Author': "El Achkar S, Demanche C, Osman M, Rafei R, Ismail MB, Yaacoub H, Pinçon C, Duthoy S, De Matos F, Gaudin C, Trovato A, Cirillo DM, Hamze M, Supply P.",
     'study accession number': 'PRJNA488372',
     'location': 'Lebanon',
     'run accessions': ['SRR7765062', 'SRR7765063']},
      #
     {'Source': "Reference set of Mycobacterium tuberculosis clinical strains: A tool for research and product development",
     'Author': "Sònia Borrell, Andrej Trauner, Daniela Brites, Leen Rigouts, Chloe Loiseau, Mireia Coscolla, Stefan Niemann, Bouke De Jong, Dorothy Yeboah-Manu, Midori Kato-Maeda, Julia Feldmann, Miriam Reinhard, Christian Beisel, Sebastien Gagneux",
     'study accession number': '',
     'run accessions},
      #
     {'Source': "Harmonized Genome Wide Typing of Tubercle Bacilli Using a Web-Based Gene-By-Gene Nomenclature System",
     'Author': "Thomas A. Kohl, Dag Harmsen, Jörg Rothgänger, Timothy Walker, Roland Diel, Stefan Niemann",
     'study accession number': '',
     'run accessions': ['ERR233352', 'ERR233358', 'ERR233379', 'ERR234170', 'ERR234222', 'ERR234259', 'ERR550640', 'ERR551491', 'ERR551666', 'SRR017677', 'ERR553084', 'ERR552680', 'ERR553271', 'ERR552212', 'ERR551655', 'ERR498366', 'ERR552202', 'ERR498356']},
      #
     {'Source': "Whole genome sequencing of drug resistant Mycobacterium tuberculosis isolates from a high burden tuberculosis region of North West Pakistan",
     'Author': "Abdul Jabbar, Jody E. Phelan, Paola Florez de Sessions, Taj Ali Khan, Hazir Rahman, Sadiq Noor Khan, Daire M. Cantillon, Leticia Muraro Wildner, Sajid Ali, Susana Campino, Simon J. Waddell 6, Taane G. Clark",
     'study accession number': '',
     'location': 'Pakistan',
     'run accessions},
      #
     {'Source': "Eighteenth-century genomes show that mixed infections were common at time of peak tuberculosis in Europe",
      'Author' : "Gemma L. Kay, Martin J. Sergeant, Zhemin Zhou, Jacqueline Z.-M. Chan, Andrew Millard, Joshua Quick, Ildikó Szikossy, Ildikó Pap, Mark Spigelman, Nicholas J. Loman, Mark Achtman, Helen D. Donoghue, and Mark J. Pallen",
     'study accession number': 'PRJEB7454',
     'run accessions},
      #
     {'Source': "Mycobacterium tuberculosis isolates from Kinshasa,DRC",
     'Author': "",
     'study accession number': 'PRJEB27847',
     'location': 'Congo',
     'run accessions': ['ERR2706914', 'ERR2706930', 'ERR2706945', 'ERR2706978', 'ERR2707002', 'ERR2707015', 'ERR2707066', 'ERR2707097', 'ERR2707138', 'ERR2707170', 'ERR2706932', 'ERR2706962', 'ERR2706927', 'ERR2706931', 'ERR2706954', 'ERR2706955', 'ERR2706913', 'ERR2707228', 'ERR2707056', 'ERR2707133', 'ERR2706959', 'ERR2707084', 'ERR2707043', 'ERR2707081', 'ERR2707102', 'ERR2707001']},
      #
     {'Source': "Spoligotyping and whole-genome sequencing analysis of lineage 1 strains of Mycobacterium tuberculosis in Da Nang, Vietnam",
     'Author': "Minako Hijikata, Naoto Keicho, Le Van Duc, Shinji Maeda, Nguyen Thi Le Hang, Ikumi Matsushita, Seiya Kato",
     'study accession number': 'PRJDB6149',
     'location': 'Vietnam',
     'run accessions': ['DRR099684', 'DRR099686', 'DRR099689', 'DRR099692', 'DRR099683', 'DRR099685', 'DRR099687', 'DRR099688', 'DRR099690', 'DRR099691', 'DRR099693', 'DRR099694']},
      #
     {'Source': "Genomic analyses of the ancestral Manila family of Mycobacterium tuberculosis",
      'Author' : "Xuehua Wan, Kent Koster, Lishi Qian, Edward Desmond, Richard Brostrom, Shaobin Hou, James T. Douglas",
      'study accession number': 'PRJNA254678',
     'location': 'Manilla',
     'run accessions},
      #
     {'Source': "Large-scale whole genome sequencing of M. tuberculosis provides insights into transmission in a high prevalence area.",
      'Author' : "Guerra-Assunção JA et al.",
      'study accession number': 'PRJEB2358',
     'location': 'Malawi',
     'run accessions': ['ERR037468', 'ERR037473', 'ERR037476', 'ERR037477', 'ERR037483', 'ERR037484', 'ERR037485', 'ERR037486', 'ERR037487', 'ERR037488', 'ERR037489', 'ERR037490', 'ERR037492', 'ERR037493', 'ERR037494', 'ERR037495', 'ERR037496', 'ERR037497', 'ERR037498', 'ERR037499', 'ERR037500', 'ERR037501', 'ERR037502', 'ERR037503', 'ERR037504', 'ERR037505', 'ERR037506', 'ERR037507', 'ERR037508', 'ERR037509', 'ERR037510', 'ERR037511', 'ERR037512', 'ERR037513', 'ERR037514', 'ERR037515', 'ERR037516', 'ERR037517', 'ERR037518', 'ERR037519', 'ERR037520', 'ERR037521', 'ERR037522', 'ERR037523', 'ERR037524', 'ERR037525', 'ERR037527', 'ERR037528', 'ERR037529', 'ERR037530', 'ERR037531', 'ERR037532', 'ERR037533', 'ERR037534', 'ERR037535', 'ERR037536', 'ERR037537', 'ERR037538', 'ERR037539', 'ERR037540', 'ERR037541', 'ERR037542', 'ERR037543', 'ERR037544', 'ERR037545', 'ERR037546', 'ERR037547', 'ERR037548', 'ERR037549', 'ERR037550', 'ERR037551', 'ERR037552', 'ERR037553', 'ERR037554', 'ERR037555', 'ERR245646', 'ERR245647', 'ERR245648', 'ERR245649', 'ERR245650', 'ERR245651', 'ERR245652', 'ERR245653', 'ERR245654', 'ERR245655', 'ERR245657', 'ERR245658', 'ERR245659', 'ERR245660', 'ERR245661', 'ERR245662', 'ERR245663', 'ERR245665', 'ERR245666', 'ERR245667', 'ERR245668', 'ERR245669', 'ERR245670', 'ERR245671', 'ERR245672', 'ERR245673', 'ERR245674', 'ERR245675', 'ERR245676', 'ERR245677', 'ERR245678', 'ERR245679', 'ERR245680', 'ERR245681', 'ERR245683', 'ERR245684', 'ERR245685', 'ERR245686', 'ERR245687', 'ERR245688', 'ERR245689', 'ERR245690', 'ERR245691', 'ERR245692', 'ERR245693', 'ERR245694', 'ERR245695', 'ERR245697', 'ERR245698', 'ERR245699', 'ERR245700', 'ERR245701', 'ERR245702', 'ERR245703', 'ERR245704', 'ERR245705', 'ERR245706', 'ERR245707', 'ERR245708', 'ERR245709', 'ERR245710', 'ERR245711', 'ERR245712', 'ERR245713', 'ERR245714', 'ERR245715', 'ERR245716', 'ERR245717', 'ERR245718', 'ERR245719', 'ERR245720', 'ERR245721', 'ERR245722', 'ERR245723', 'ERR245724', 'ERR245725', 'ERR245728', 'ERR245729', 'ERR245730', 'ERR245731', 'ERR245732', 'ERR245733', 'ERR245734', 'ERR245735', 'ERR245736', 'ERR245737', 'ERR245738', 'ERR245739', 'ERR245740', 'ERR245741', 'ERR245742', 'ERR245743', 'ERR245744', 'ERR245745', 'ERR245746', 'ERR245747', 'ERR245748', 'ERR245749', 'ERR245750', 'ERR245751', 'ERR245752', 'ERR245753', 'ERR245754', 'ERR245755', 'ERR245756', 'ERR245757', 'ERR245758', 'ERR245759', 'ERR245761', 'ERR245762', 'ERR245763', 'ERR245764', 'ERR245765', 'ERR245766', 'ERR245767', 'ERR245768', 'ERR245769', 'ERR245770', 'ERR245772', 'ERR245773', 'ERR245774', 'ERR245775', 'ERR245776', 'ERR245777', 'ERR245778', 'ERR245780', 'ERR245781', 'ERR245782', 'ERR245783', 'ERR245784', 'ERR245785', 'ERR245786', 'ERR245787', 'ERR245788', 'ERR245789', 'ERR245790', 'ERR245791', 'ERR245793', 'ERR245794', 'ERR245795', 'ERR245796', 'ERR245798', 'ERR245799', 'ERR245800', 'ERR245801', 'ERR245802', 'ERR245803', 'ERR245804', 'ERR245805', 'ERR245806', 'ERR245807', 'ERR245809', 'ERR245810', 'ERR245811', 'ERR245812', 'ERR245813', 'ERR245814', 'ERR245815', 'ERR245816', 'ERR245817', 'ERR245818', 'ERR245819', 'ERR245820', 'ERR245821', 'ERR245823', 'ERR245824', 'ERR245825', 'ERR245826', 'ERR245827', 'ERR245828', 'ERR245829', 'ERR245830', 'ERR245831', 'ERR245832', 'ERR245833', 'ERR245834', 'ERR245835', 'ERR245836', 'ERR245837', 'ERR245838', 'ERR245839', 'ERR245840', 'ERR245841', 'ERR245842', 'ERR245843', 'ERR245844', 'ERR245845', 'ERR245846', 'ERR245847', 'ERR245848', 'ERR245849', 'ERR036186', 'ERR036187', 'ERR036189', 'ERR036190', 'ERR036191', 'ERR036192', 'ERR036193', 'ERR036194', 'ERR036195', 'ERR036196', 'ERR036197', 'ERR036198', 'ERR036199', 'ERR036200', 'ERR036202', 'ERR036203', 'ERR036204', 'ERR036205', 'ERR036206', 'ERR036207', 'ERR036208', 'ERR036209', 'ERR036210', 'ERR036211', 'ERR036212', 'ERR036213', 'ERR036214', 'ERR036215', 'ERR036217', 'ERR036218', 'ERR036219', 'ERR036220', 'ERR036221', 'ERR036222', 'ERR036223', 'ERR036224', 'ERR036225', 'ERR036226', 'ERR036227', 'ERR036228', 'ERR036229', 'ERR036230', 'ERR036231', 'ERR036232', 'ERR036233', 'ERR036235', 'ERR036236', 'ERR036237', 'ERR036238', 'ERR036239', 'ERR036240', 'ERR036241', 'ERR036242', 'ERR036243', 'ERR036244', 'ERR036245', 'ERR036247', 'ERR036248', 'ERR036249', 'ERR037467', 'ERR037469', 'ERR037470', 'ERR037471', 'ERR037472', 'ERR037474', 'ERR037475', 'ERR037479', 'ERR037480', 'ERR037481', 'ERR245771', 'ERR036185', 'ERR037478', 'ERR245656', 'ERR036201', 'ERR245822', 'ERR036188', 'ERR245696', 'ERR245797', 'ERR245664', 'ERR245760', 'ERR037526', 'ERR036234', 'ERR245726', 'ERR037491', 'ERR037482', 'ERR245682', 'ERR036246', 'ERR245792', 'ERR245808', 'ERR036216', 'ERR245727', 'ERR245779']},
     #
     {'Source': "Whole-genome sequencing of multidrug-resistant Mycobacterium tuberculosis from Myanmar",
      'Author' : "Htin Lin Aung, Thanda Tun, Danesh Moradigaravand, Claudio U. Köser, Wint Wint Nyunt, Si Thu Aung, Thandar Lwin, Kyi Kyi Thinn, John A. Crump, Julian Parkhill, Sharon J. Peacock, Gregory M. Cook, and Philip C. Hill",
      'study accession number': 'PRJEB10037',
     'location': 'Burma',
     'run accessions': ['ERR983228', 'ERR983229', 'ERR983230', 'ERR983231', 'ERR983232', 'ERR983233', 'ERR983234', 'ERR983235', 'ERR983236', 'ERR983237', 'ERR983238', 'ERR983239', 'ERR983240', 'ERR983241']},
     #
     {'Source': "Whole Genome Sequencing Based Characterization of Extensively Drug-Resistant Mycobacterium tuberculosis Isolates from Pakistan",
      'Author' : "Asho Ali, Zahra Hasan, Ruth McNerney, Kim Mallard, Grant Hill-Cawthorne, Francesc Coll, Mridul Nair, Arnab Pain, Taane G. Clark, Rumina Hasan",
      'study accession number': 'PRJEB7798',
     'location': 'Pakistan',
     'run accessions},
     #
     {'Source': "Genotyping of Mycobacterium tuberculosis spreading in Hanoi, Vietnam using conventional and whole genome sequencing methods",
      'Author' : "S Maeda, M Hijikata, NT Le Hang, PH Thuong...(2020)",
      'study accession number': 'DRP005596',
     'location': 'Vietnam',
     'run accessions': ['DRR184599']+['DRR1846'+str(k).zfill(2) for k in range(83)]+['DRR184'+str(k) for k in range(877,1000)]+['DRR185'+str(k).zfill(3) for k in range(125)]}, #DRR184599–682 and DRR184877–5124
]


# =========
# FUNCTIONS
# =========


def to_brynildsrud():
    """
    This function parses information from 'data/Brynildsrud_Dataset_S1.xls'
    into a dictionary called brynildsrud.

    Returns:
        brynildsrud (dict): which structure is
        {
            a_SRA:
                {
                    'Source': ...,
                    'Author': ...,
                    'study accession number': ...,
                    'location': ...,
                    'date': ...
                },
            ...
        }
    """
    brynildsrud = {}
    source, author, study, location, date = '', '', '', '', ''
    p = str(PurePath('CRISPRbuilder-TB', 'data', 'Brynildsrud_Dataset_S1.xls'))
    wwb = open_workbook(p)
    wws = wwb.sheet_by_index(0)

    for row in range(1, wws.nrows):
        srr = wws.cell_value(row, 4)

        if len(srr) > 1:

            brynildsrud[srr] = {}
            source = wws.cell_value(row, 5).replace(',', '')

            if source == 'This study':
                author = 'Brynildsrud et al.'

            source = source.replace('This study', 'Global expansion of '
                                    'Mycobacterium tuberculosis lineage 4 '
                                    'shaped by colonial migration and local '
                                    'adaptation')

            if len(wws.cell_value(row, 3)) > 1:
                study = wws.cell_value(row, 3)

            if len(wws.cell_value(row, 6)) > 1:
                location = wws.cell_value(row, 6)

            if wws.cell_value(row, 0).count('_') == 2:
                dat = wws.cell_value(row, 0).split('_')[-1]
                une_date = True
                for w in dat:
                    if w not in '0123456789':
                        une_date = False
                if une_date:
                    date = dat

        brynildsrud[srr] = {
            'Source': source,
            'Author': author,
            'study accession number': study,
            'location': location,
            'date': date
        }
    return brynildsrud


def to_h37rv():
    """
    This function creates a string called h containing the genome sequence of
    the H37RV strain without headers, extracted from 'data/NC_000962.3.txt'

    Returns:
        h (str): genome sequence in a single line and without the headers
    """
    p = str(PurePath('CRISPRbuilder-TB', 'data', 'NC_000962.3.txt'))
    with open(p, 'r') as f:
        h = f.read()
    return h


def to_reads(origine, H37RV):
    """
    This function creates a dictionary called Lignee_renvoyee containing 2
    reads per lineage and their specific position, extracted from xlsx_lignee.

    Args:
        origine(str): name of the dataset origin representing a specific lineage

    Returns:
        Lignee_renvoyee (dict): with the following structure
        {
            (
                position_number:
                    (a_read, a_read, lineage_number),
                ...
            )
        }

    Note:
        - we read the 1st sheet of xlsx_lignee.
        - we browse the sheet from the 1st row containing data except for
          headers. For each row, if the 'position' cell is not empty :
        - - from the 'lineage' column we keep only the lineage number without
            any * and assign it to 'lignee',
        - - from the 'position' column we decrease the position number by 1,
        - - from the 'Allele change on strain +' column we extract the 1st
            character (A, T, G or C) and assign it to 'source', we extract the
            3rd character (A, T, G or C) and assign it to 'cible',
        - - we create a substring seq1 from H37RV
        - - from seq1 we switch the character on position 'longueur' from
            'source' to 'cible', and create the substring seq2,
        - - we create the tuple (seq1, seq2, lignee)
    """
    Lignee_renvoyee = {}

    with open(P_CSV, 'r') as f:
        csv_reader = reader(f, delimiter=',', quotechar='"')
        next(csv_reader)

        for row in csv_reader:
            if row[16] == origine and row[1] != '':
                lignee = row[0].strip()
                pos0 = int(row[1].strip())
                pos = pos0 - 1
                source = row[3].strip()[0]
                cible = row[3].strip()[2]
                assert H37RV[pos] == source
                seq1 = H37RV[pos - DEMI_LONGUEUR:pos + DEMI_LONGUEUR + 1]
                seq2 = seq1[:DEMI_LONGUEUR] + cible + seq1[DEMI_LONGUEUR + 1:]
                Lignee_renvoyee[pos] = (seq1, seq2, lignee)

    print("We have selected specific reads to compare with different lineages")
    return Lignee_renvoyee


def get_info(srr):
    """
    This function extracts data from the NCBI website regarding a specific SRA to
    put them into a dictionary called dico0.

    Args:
        srr (str): reference of a specific SRR

    Returns:
        dico0 (dict):

    Note:
        - if the dico 'platform' is 'ILLUMINA' and the dico 'LIBRAIRY_LAYOUT' is
          'PAIRED', then we assign 'SAMPLE_ATTRIBUTE' to a temporary list called
          'attributes', which we'll use to assign values to dico0. We browse the
          list 'attributes' to define dico0['location'], dico0['date'],
          dico0['sra'], dico0['center'], dico0['strain'],
        - if dico['SAMPLE_ATTRIBUTE'] is empty, then dico0 stays empty,
        - we respectively assign dico[...]['TAXON_ID'], dico[...][
          'SCIENTIFIC_NAME'], dico[...]['@alias'], dico[...]['@center_name']
          to dico0['taxid'], dico0['name'], dico0['study'], dico0['cemter'],
        - we assign dico[...]['#text'] to dico0['bioproject'], separating the
          cases when dico[...]['EXTERNAL_ID'] is a string or a list.
    """
    Entrez.email = "christophe.guyeux@univ-fcomte.fr"
    ret = Entrez.efetch(db="sra", id=srr, retmode="xml")
    dico = parse(ret.read())

    dico0 = {}
    location, date, SRA, center, strain = '', '', '', '', ''

    if 'ILLUMINA' in dico['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE'][
        'EXPERIMENT'].get('PLATFORM') and 'PAIRED' in dico[
        'EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE']['EXPERIMENT'][
        'DESIGN']['LIBRARY_DESCRIPTOR'].get('LIBRARY_LAYOUT'):

        try:
            attributes = dico['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE'][
                                'SAMPLE']['SAMPLE_ATTRIBUTES'].get(
                                'SAMPLE_ATTRIBUTE')
        except KeyError:
            return {}

        for k in attributes:
            if k.get('TAG') == 'geographic location (country and/or sea)':
                location = k.get('VALUE')
            elif k.get('TAG') == 'collection date':
                date = k.get('VALUE')
            elif k.get('TAG') == 'SRA accession':
                SRA = k.get('VALUE')
            elif k.get('TAG') == 'INSDC center name':
                center = k.get('VALUE')
            elif k.get('TAG') == 'Strain':
                strain = k.get('VALUE')

        center = dico['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE'][
                            'EXPERIMENT'].get('@center_name')

        if isinstance(
                dico['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE']['STUDY'][
                    'IDENTIFIERS'].get('EXTERNAL_ID'), list):
            bioproject = dico['EXPERIMENT_PACKAGE_SET'][
                'EXPERIMENT_PACKAGE']['STUDY']['IDENTIFIERS']['EXTERNAL_ID'][
                0].get('#text', '')
        else:
            bioproject = dico['EXPERIMENT_PACKAGE_SET'][
                'EXPERIMENT_PACKAGE']['STUDY']['IDENTIFIERS'][
                'EXTERNAL_ID'].get('#text', '')

        dico0 = {
            'location': location,
            'date': date,
            'SRA': SRA,
            'center': center,
            'strain': strain,
            'taxid': dico['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE'][
                'SAMPLE']['SAMPLE_NAME'].get('TAXON_ID', ''),
            'name': dico['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE'][
                'SAMPLE']['SAMPLE_NAME'].get('SCIENTIFIC_NAME', ''),
            'study': dico['EXPERIMENT_PACKAGE_SET']['EXPERIMENT_PACKAGE'][
                'STUDY'].get('@alias', ''),
            'bioproject': bioproject
        }
    return dico0


def change(x):
    """
    This function transforms a nitrogenous base into its corresponding
    nitrogenous base.

    Args:
        x (str): initial nitrogenous base A, T, G, C

    Returns:
        (str): corresponding nitrogenous base
    """
    if x == 'A':
        return 'T'
    elif x == 'T':
        return 'A'
    elif x == 'C':
        return 'G'
    elif x == 'G':
        return 'C'
    else:
        return x


def rev_comp(s):
    """
    This function transforms a list of nitrogenous bases into a string
    representing the reverse list of corresponding nitrogenous bases.

    Args:
        s (list): initial list of nitrogenous bases

    Returns:
        (str): represents the reverse list of corresponding nitrogenous bases
    """
    u = [change(x) for x in s]
    u.reverse()
    return ''.join(u)


def similaire(x, y):
    """
    This function aligns 2 sequences and returns the ratio between the score
    and the size of the alignment.

    Args:
        x (str): first sequence
        y (str): second sequence

    Returns:
        (float): score divided by size of the alignment
    """
    alignments = pairwise2.align.globalxx(x, y)
    return alignments[0][2] / alignments[0][4]


def to_spol_sit():
    """
    This function creates a dictionary called spol_sit associating spoligotypes
    with their corresponding SIT (Spoligo International Type) in accordance with
     the file 'data/1_3882_SORTED.xls'.

    Returns:
        spol_sit (dict): with the following structure
        {
            a_spoligotype: a_SIT,
            ...
        }

    Note:
        - we extract data from 'data/1_3882_SORTED.xls' into a sheet called ws,
          where we set column 1 with index 0,
        - we assign the successive elements of the 'Spoligotype Binary'
          column from ws as keys and the successive elements of the 'SIT'
          column from ws as values to the dictionary spol_sit (after
          replacing 'n' into a black square and 'o' into a white square).
    """
    p = str(PurePath('CRISPRbuilder-TB', 'data', '1_3882_SORTED.xls'))
    wb = open_workbook(p)
    ws = wb.sheet_by_index(0)
    spol_sit = {}

    for row in range(1, ws.nrows):
        spol, sit = ws.cell_value(row, 2).replace('n', '\u25A0').replace('o',
                            '\u25A1'), ws.cell_value(row, 8)
        spol_sit[spol] = sit

    return spol_sit


def add_spoligo_dico(type_sit, dico_afr, item, spol_sit):
    """
    When there's no 'SIT' reference for a SRA (represented by parameter item)
    in dico_afr, or if this reference is undefined, we check in spol_sit a
    corresponding spoligotype and update dico_afr with this spoligotype.

    Args:
        type_sit (str): either 'SIT' or 'SIT_silico'
        dico_afr (dict): dictionary used to update dico_africanum.pkl
        item (str): a specific SRA
        spol_sit (dict): dictionary containing spoligotypes and their
        corresponding sits

    Returns:
        (None)

    Note:
         We take a spoligotype from dico_afr[item]['spoligo'] and if this
         spoligotype is in spol_sit, then we update dico_afr with the 'SIT'
         reference. If this spoligotype is not in spol_sit, then we update
         dico_afr with 'X' as a 'SIT' reference.
    """
    if type_sit == 'SIT':
        type_spoligo = 'spoligo'
    elif type_sit == 'SIT_silico':
        type_spoligo = 'spoligo_vitro'

    spol = dico_afr[item].get(type_spoligo)

    if spol in spol_sit:
        dico_afr[item][type_sit] = spol_sit.get(spol)
    else:
        dico_afr[item][type_sit] = 'X'

    print(f"We're adding the {type_sit}: {dico_afr[item][type_sit]} to the "
          f"database")


def to_formatted_results(seq, repitem, nb):
    """
    This function compares a nucleotide query sequence against a nucleotide
    sequence database and returns a formatted result.

    Args:
        seq(str): a genome sequence
        repitem(str): REP/sequences/SRA/SRA path to the blast database
        nb(int): 8 or 12

    Returns:
        (str): a formatted result of a sequence blast
    """
    with open(P_FASTA, 'w') as f:
        f.write('>\n' + seq)
    result = subprocess.run(["blastn", "-num_threads", "12", "-query", P_FASTA,
                                 "-evalue", "1e-5", "-task", "blastn", "-db",
                                 repitem, "-outfmt", "10 sseq"],
                                stdout=subprocess.PIPE)

    return result.stdout.decode('utf8').splitlines()


def to_nb_seq(seq, chaine, debut_prefixe, fin_prefixe, debut_suffixe,
              fin_suffixe):
    """
    This function returns a length.

    Args:
        seq(str): sequence of nucleotides
        chaine(str):
        debut_prefixe(int): beginning of the 1st section in the sequence seq
        fin_prefixe(int): end of the 1st section in the sequence seq
        debut_suffixe(int): beginning of the 2nd section in the sequence seq
        fin_suffixe(int): end of the 2nd section in the sequence seq

    Returns:
        nb_seq (int):
    """
    return len([u for u in chaine if seq[fin_prefixe:fin_suffixe] in u]) + \
             len([u for u in chaine if seq[debut_prefixe:debut_suffixe] in u])


def condition_spol_vitro(espaceur1, espaceur2, spoligo_vitro, nb, matches,
                         item, dico_afr):
    """
    Fills-in the spoligo_vitro components in dico_afr

    Args:
        espaceur1(str): name of the 1st spacer
        espaceur2(str): name of the 2nd spacer
        spoligo_vitro(str): name of the spoligo_vitro to update in dico_afr
        nb(int):
        matches(str):

    Returns:
        (None)
    """
    for k in range(1, nb + 1):
        if min([matches.count(espaceur1 + str(k) + ','),
                matches.count(espaceur2 + str(k) + ',')]) / \
                dico_afr[item].get('couverture') > 0.05:
            dico_afr[item][spoligo_vitro] += '\u25A0'
        else:
            dico_afr[item][spoligo_vitro] += '\u25A1'


def collect_SRA(item):
    """
    When the user specifies a SRA reference called {item}, collect_SRA(item)
    provides the genome information dictionary by filling in dico_afr[item] and
    printing its elements.

    Args:
        item(str): a SRA reference

    Returns:
        (None)
    """
    # We create a string called H37RV containing the genome sequence of the
    # strain H37Rv.
    H37RV = to_h37rv()
    TAILLE_GEN = len(H37RV)

    # We initialize the genome information dictionary dico_afr.
    dico_afr = {}

    # We create a tmp folder
    Path.cwd().joinpath('CRISPRbuilder-TB', 'tmp').mkdir(exist_ok=True,
                                                      parents=True)

    # ==== CHECKING IF THE SRA IS ALREADY IN THE DATABASE ===================

    # If {item} is not in 'REP/sequences', we create a directory called
    # 'REP/sequences/{item}'
    if item not in listdir(P_SEQUENCES):
        Path.cwd().joinpath('CRISPRbuilder-TB', 'REP', 'sequences',
                            item).mkdir(exist_ok=True, parents=True)
        Path.cwd().joinpath('CRISPRbuilder-TB', 'REP', 'sequences', item,
                            item).mkdir(exist_ok=True, parents=True)
        print(f"We're creating a directory {item}.")

    # We create paths to 'REP/sequences/{item}' and 'REP/sequences/{item}/{item}'
    rep = str(PurePath('CRISPRbuilder-TB', 'REP', 'sequences', item))
    repitem = str(PurePath('CRISPRbuilder-TB', 'REP', 'sequences', item, item))

    # If {item} is not in dico_afr, we add it to dico_afr
    if item not in dico_afr:
        print(f"We're adding {item} to the database.")
        dico_afr[item] = {}

    # ==== DOWNLOADING FASTA FILES FOR THE SRA ===========================

    # If the REP/sequences/{item} directory contains no file in fasta format,
    # we download directly from NCBI into REP the fasta files regarding this SRA.
    # Then we tranfer these files to REP/sequences/{item}.
    if len([u for u in listdir(rep) if 'fasta' in u]) == 0:
        print("We're downloading the files in fasta format")

        completed = subprocess.run(['parallel-fastq-dump', '-t', '8',
                                    '--split-files', '--fasta', '-O', P_REP,
                                    '-s', item])
        # if the download worked
        if completed.returncode == 0:
            print("fasta files successfully downloaded.")
            for k in listdir(P_REP):
                if k.endswith('.fasta'):
                    p = str(PurePath('CRISPRbuilder-TB', 'REP', 'sequences',
                                     item, k))
                    p_k = str(PurePath('CRISPRbuilder-TB', 'REP', k))
                    move(p_k, p)
        # if the download didn't work, we delete the SRA from dico_afr
        else:
            del dico_afr[item]
            print("Failed to download fasta files.")

    # If {item}_1.fasta or {item}_2.fasta is not in the REP/sequences/{item}
    # directory, we delete {item} from dico_afr and remove the
    # REP/sequences/{item} directory.
    if (item + '_1.fasta' not in listdir(rep) or
            item + '_2.fasta' not in listdir(rep)):
        del dico_afr[item]
        rmtree(rep)
        print("The fasta files don't have the proper format. The operation "
              "wasn't successful.")

    # If {item}_shuffled.fasta is not in the REP/sequences/{item} directory,
    # we change "item + '.'" into "item + '_1.'" or "item + '_2.'" in the files
    # REP/sequences/{item}/{item}_1.fasta and
    # REP/sequences/{item}/{item}_2.fasta. Then we concatenate those files
    # into a new file called REP/sequences/{item}/{item}_shuffled.fasta.
    p_shuffled = str(PurePath('CRISPRbuilder-TB', 'REP', 'sequences', item, item
                              + '_shuffled.fasta'))
    if item + '_shuffled.fasta' not in listdir(rep):

        print("We're mixing both fasta files, which correspond to the two "
              "splits ends.")

        p_fasta_1 = str(PurePath('CRISPRbuilder-TB', 'REP', 'sequences', item,
                                 item + '_1.fasta'))
        p_fasta_2 = str(PurePath('CRISPRbuilder-TB', 'REP', 'sequences', item,
                                 item + '_2.fasta'))

        if name == 'posix':
            system("sed -i 's/" + item + './' + item + "_1./g' " + p_fasta_1)
            system("sed -i 's/" + item + './' + item + "_2./g' " + p_fasta_2)
            system("cat " + p_fasta_1 + " " + p_fasta_2 + " > " + p_shuffled)
        else:
            for fic in ['_1', '_2']:
                system("cat " + rep + item + fic + ".fasta | %{$_ -replace '" +
                       item + ".', '" + item + fic + ".'}")
            system("get-content " + p_fasta_1 + ", " + p_fasta_2 + " | out-file "
                                                                 "" + p_shuffled)

    # ==== UPDATING NB_READS IN DICO_AFR ================================

    # If there's no nb_reads reference in dico_afr[{item}], we count the number
    # of '>' in REP/sequences/{item}/shuffled.fasta, keep it in tmp/nb.txt
    # and assign it to nb.
    if 'nb_reads' not in dico_afr[item] or dico_afr[item]['nb_reads'] == '':
        if name == 'posix':
            system("cat " + p_shuffled + " | grep '>' | wc -l > " + P_TXT_POSIX)
            nb = eval(open(P_TXT_POSIX).read().split('\n')[0])
        else:
            print('windows')
            nb = eval(open(P_TXT_WIN).read().split('\n')[0])

        dico_afr[item]['nb_reads'] = nb

    # ==== UPDATING LEN_READS IN DICO_AFR ====================================

    # If there's no 'len_reads' reference in dico_afr[{item}], we evaluate
    # it from the REP/sequences/{item}/{item}_shuffled.fasta file
    if 'len_reads' not in dico_afr[item]:
        nb = len(''.join(open(p_shuffled).read(10000).split('>')[1].split(
            '\n')[1:]))
        dico_afr[item]['len_reads'] = nb

    # ==== UPDATING COVERAGE IN DICO_AFR ======================================

    # If there's no 'couverture' reference in dico_afr[{item}], we evaluate it
    # before assigning the result to dico_afr.
    if 'couverture' not in dico_afr[item] or \
            dico_afr[item].get('couverture') == '':
        dico_afr[item]['couverture'] = round(dico_afr[item].get('nb_reads') *
                                             dico_afr[item].get('len_reads') /
                                             TAILLE_GEN, 2)

    # If {item} in dico_afr has a low coverage, we delete {item} from dico_afr.
    if dico_afr[item].get('couverture') < 50:
        del dico_afr[item]
        print(f"The coverage is too low. {item} is being removed from the "
              "database")
    else:
        # ==== IF THE COWERAGE IS GOOD ENOUGH ================================

        # If {item} in dico_afr has a good coverage, we create in
        # REP/sequences/{item} a database for Blast called {item}
        if item+'.nal' not in listdir(rep) and item+'.nin' not in listdir(rep):
            print("We're creating a database for Blast")
            completed = subprocess.run(['makeblastdb', '-in', p_shuffled,
                                        '-dbtype', 'nucl', '-title', item,
                                        '-out', repitem])
            assert completed.returncode == 0

        # === UPDATING SOURCE, AUTHOR, ACCESSION NBER, LOCATION IN DICO_AFR ===

        # If there's no 'source' reference in dico_afr[{item}], we browse
        # the list 'Origines'. if {item} is in the 'run accessions' section,
        # we update dico_afr[{item}].
        if 'Source' not in dico_afr[item]:
            for u in Origines:
                if item in u['run accessions']:
                    for elt in ['Source', 'Author', 'study accession number',
                               'location']:
                        dico_afr[item][elt] = u.get(elt)

        # ==== UPDATING DICO_AFR FROM NCBI ===============================

        # If there's no 'taxid' reference in dico_afr[{item}],we collect data
        # from NCBI to update dico_afr
        if 'taxid' not in dico_afr[item]:
            dicobis = get_info(item)
            for elt in dicobis:
                dico_afr[item][elt] = dicobis[elt]

        # ==== UPDATING DICO_AFR WITH THE DATASET BRYNILDSRUD ================

        # We check the presence of {item} in the file
        # 'data/Brynildsrud_Dataset_S1.xls' to update dico_afr.
        brynildsrud = to_brynildsrud()
        if item in brynildsrud:
            for elt in brynildsrud[item]:
                dico_afr[item][elt] = brynildsrud[item][elt]
                print(f"{item} is in the database Brynildsrud")
        else:
            print(f"{item} is not in the database Brynildsrud")

        # ==== UPDATING THE SPOLIGOTYPES IN DICO_AFR ========================

        # If 'spoligo' for {item} is not in dico_afr or is undefined,
        # then

        if 'spoligo' not in dico_afr[item] or dico_afr[item]['spoligo'] == '':
            print(f"The spoligotypes are being blasted")
            dico_afr[item]['spoligo'] = ''
            dico_afr[item]['spoligo_new'] = ''

            p_spoligo_old = str(PurePath('CRISPRbuilder-TB', 'data',
                                         'spoligo_old.fasta'))
            p_spoligo_new = str(PurePath('CRISPRbuilder-TB', 'data',
                                         'spoligo_new.fasta'))
            p_old_blast = str(PurePath('CRISPRbuilder-TB', 'tmp', item +
                                       "_old.blast"))
            p_new_blast = str(PurePath('CRISPRbuilder-TB', 'tmp', item +
                                       "_new.blast"))

            completed = subprocess.run("blastn -num_threads 12 -query " +
                                       p_spoligo_old + " -evalue 1e-6 -task "
                                       "blastn -db " + repitem + " -outfmt '10 "
                                       "qseqid sseqid sstart send qlen length "
                                       "score evalue' -out " + p_old_blast,
                                       shell=True)
            assert completed.returncode == 0

            completed = subprocess.run("blastn -num_threads 12 -query " +
                                       p_spoligo_new + " -evalue 1e-6 -task "
                                       "blastn -db " + repitem + " -outfmt '10 "
                                       "qseqid sseqid sstart send qlen length "
                                       "score evalue' -out " + p_new_blast,
                                       shell=True)
            assert completed.returncode == 0

            for pos, spol in enumerate(['old', 'new']):
                p_blast = str(PurePath('CRISPRbuilder-TB', 'tmp', item + '_' +
                                       spol + '.blast'))
                p_fasta = str(PurePath('CRISPRbuilder-TB', 'data', 'spoligo_' +
                                       spol + '.fasta'))

                with open(p_blast) as f:
                    matches = f.read()
                    nb = open(p_fasta).read().count('>')
                    for k in range(1, nb + 1):
                        if matches.count('espaceur' + spol.capitalize() + str(k)
                                         + ',') >= 5:
                            dico_afr[item]['spoligo' + ['', '_new'][pos]] \
                                    += '\u25A0'
                        else:
                            dico_afr[item]['spoligo' + ['', '_new'][pos]] \
                                    += '\u25A1'

                dico_afr[item]['spoligo' + ['', '_new'][pos] + '_nb'] = [
                        matches.count('espaceur' + spol.capitalize() + str(k) +
                                      ',') for k in range(1, nb + 1)]
                try:
                    move(p_blast, rep)
                except:
                    print(p_blast, " is already in the SRA directory.")

            print("     " + dico_afr[item]['spoligo'])
            print("     " + str(dico_afr[item]['spoligo_nb']))
            print("     " + dico_afr[item]['spoligo_new'])
            print("     " + str(dico_afr[item]['spoligo_new_nb']))

        # If 'spoligio_vitro' is undefined for {item} in dico_afr, we blast
        # the spoligo_vitro, and update both lineage.csv and dico_afr.
        if 'spoligo_vitro' not in dico_afr[item]:
            print(f"The spoligo-vitro are being blasted")
            dico_afr[item]['spoligo_vitro'] = ''
            dico_afr[item]['spoligo_vitro_new'] = ''

            p_spoligo_vitro = str(PurePath('CRISPRbuilder-TB', 'data',
                                           'spoligo_vitro.fasta'))
            p_spoligo_vitro_new = str(PurePath('CRISPRbuilder-TB', 'data',
                                               'spoligo_vitro_new.fasta'))
            p_vitro_blast = str(PurePath('CRISPRbuilder-TB', 'tmp', item +
                                         '_vitro.blast'))
            p_vitro_new_blast = str(PurePath('CRISPRbuilder-TB', 'tmp', item +
                                             '_vitro_new.blast'))

            completed = subprocess.run("blastn -num_threads 8 -query " +
                                       p_spoligo_vitro + " -evalue 1e-6 -task "
                                       "blastn -db " + repitem + " -outfmt '10 "
                                       "qseqid sseqid sstart send qlen length "
                                       "score evalue' -out " + p_vitro_blast,
                                       shell=True)
            assert completed.returncode == 0

            completed = subprocess.run("blastn -num_threads 8 -query " +
                                       p_spoligo_vitro_new + " -evalue 1e-6 "
                                       "-task blastn -db " + repitem + " -outfmt"
                                       " '10 qseqid sseqid sstart send qlen "
                                       "length score evalue' -out " +
                                       p_vitro_new_blast, shell=True)
            assert completed.returncode == 0

            with open(p_vitro_blast) as f:
                matches = f.read()
                nb = int(open(p_spoligo_vitro).read().count('>') / 2)

                condition_spol_vitro('espaceur_vitroOld', 'espaceur_vitroBOld',
                                     'spoligo_vitro', nb, matches, item,
                                     dico_afr)

            dico_afr[item]['spoligo_vitro_nb'] = [(matches.count(
                'espaceur_vitroOld' + str(k) + ','), matches.count(
                'espaceur_vitroBOld' + str(k) + ',')) for k in range(1, nb + 1)]

            with open(p_vitro_new_blast) as fp:
                matches = fp.read()
                nb = int(open(p_spoligo_vitro_new).read().count('>') / 2)

                condition_spol_vitro('espaceur_vitro_new', 'espaceur_vitro_newB',
                                     'spoligo_vitro_new', nb, matches, item,
                                     dico_afr)

            dico_afr[item]['spoligo_vitro_new_nb'] = [(matches.count(
                'espaceur_vitro_new' + str(k) + ','), matches.count(
                'espaceur_vitro_newB' + str(k) + ',')) for k in range(1, nb + 1)]

            print("     " + dico_afr[item]['spoligo_vitro'])
            print("     " + dico_afr[item]['spoligo_vitro_new'])

            p = str(PurePath('CRISPRbuilder-TB', 'tmp', item + '_*.blast'))
            try:
                move(p, rep)
            except:
                print(p, " is already in the SRA directory.")
            # system('mv /tmp/' + item + '_*.blast ' + rep)

            print("     " + str(dico_afr[item]['spoligo_vitro_nb']))
            print("     " + str(dico_afr[item]['spoligo_vitro_new_nb']))

        # We transform data from 1_3882_SORTED.xls into a dictionary called
        # spol_sit containing spoligotypes with their corresponding SITs.
        spol_sit = to_spol_sit()

        # When there's no 'SIT' reference for {item} in dico_afr, or if this
        # reference is undefined, we check in spol_sit a corresponding
        # spoligotype and update dico_afr with this spoligotype.
        if 'SIT' not in dico_afr[item] or dico_afr[item]['SIT'] == '':
            add_spoligo_dico('SIT', dico_afr, item, spol_sit)

        # We proceed the same way with the 'SIT_silico' reference as previously
        # with the 'SIT' reference.
        if 'SIT_silico' not in dico_afr[item]:
            add_spoligo_dico('SIT_silico', dico_afr, item, spol_sit)

        # ==== TESTING LINEAGE L6+ANIMAL =================================

        # if {item} in dico_afr doesn't have a L6+animal lineage, then
        if 'lineage_L6+animal' not in dico_afr[item]:
            print("We're adding the lineage according to the SNPs L6+animal")
            seq1 = 'ACGTCGATGGTCGCGACCTCCGCGGCATAGTCGAA'
            seq2 = "ACGTCGATGGTCGCGACTTCCGCGGCATAGTCGAA"
            formatted_results = to_formatted_results(seq2, repitem, 12)
            nb_seq1 = to_nb_seq(seq1, formatted_results, 13, 17, 18, 22)
            nb_seq2 = to_nb_seq(seq2, formatted_results, 13, 17, 18, 22)

            if nb_seq1 > nb_seq2:
                dico_afr[item]['lineage_L6+animal'] = '1'
            elif nb_seq2 > nb_seq1:
                dico_afr[item]['lineage_L6+animal'] = '2'
            else:
                dico_afr[item]['lineage_L6+animal'] = 'X'

        # ==== TESTING PGG LINEAGE ======================================

        # If dico_afr has no information about 'lineage_PGG' regarding {item},
        # we select a read around position 2154724 using DEMI-LONGUEUR, change
        # some parts of the read and blast it. We select another read around
        # position 7585-1 using DEMI-LONGUEUR, change some parts of the reads
        # and blast it. Then the lineage is updated in dico_afr[{item}]. The
        # result is analysed to update the lineage in dico_afr[{item}].
        """
        Note:
        - we select a read 'seq1' around a specific position 'pos' and define
          its length by twice 'DEMI_LONGUEUR',
        - from the read 'seq1', we define a read 'seq2' which is 'seq1' with
          a nitrogenous base replaced by 'A' at the 'debut_suffixe-1' position,
        - we serialize the read 'seq2' into 'snp.fasta' and blast the file
          obtained,
        - the formatted result is analysed to update the lineage.

        Examples:
        In this example, we decide to change in position 323 the nitrogenous
        base into A. We thus assign 324 to 'pos' and 20 to 'DEMI_LONGUEUR'.
        h represents H37RV. The 2 different reads are composed of the
        following strings

        seq1 = h[304] ... h[344]
        seq2 = h[304] ... h[322] A  h[324] ... h[344]

        Both if conditions revolve around A or h[323].

        nb_seq1 represents the 2 following strings which should be in the
        formatted results
                                    h[323] ... h[327]
                         h[319] ... h[323]

        nb_seq2 represents the 2 following strings which should be in the
        formatted results
                                       A ... h[327]
                            h[319] ... A

        which is formally interpreted by
                                       A  debut_suffixe ... fin_suffixe
        debut_prefixe ... fin_suffixe  A
        """
        if 'lineage_PGG' not in dico_afr[item]:
            lignee = []
            print("We're adding the lineage according to the SNPs PGG")
            pos = 2154724
            seq1 = H37RV[pos - DEMI_LONGUEUR:pos + DEMI_LONGUEUR + 1]
            seq2 = seq1[:19] + 'A' + seq1[20:]
            formatted_results = to_formatted_results(seq2, repitem, 12)
            nb_seq1 = to_nb_seq(seq1, formatted_results, 15, 19, 20, 24)
            nb_seq2 = to_nb_seq(seq2, formatted_results, 15, 19, 20, 24)

            if nb_seq1 > nb_seq2:
                lignee.append(2)
            elif nb_seq2 > nb_seq1:
                lignee.append('1')
            else:
                lignee.append('X')

            pos = 7585-1
            seq1 = H37RV[pos - DEMI_LONGUEUR:pos + DEMI_LONGUEUR + 1]
            seq2 = seq1[:20] + 'A' + seq1[21:]
            formatted_results = to_formatted_results(seq2, repitem, 12)
            nb_seq1 = to_nb_seq(seq1, formatted_results, 16, 20, 21, 25)
            nb_seq2 = to_nb_seq(seq2, formatted_results, 16, 20, 21, 25)

            if nb_seq1 > nb_seq2:
                lignee.append(3)
            elif nb_seq2 > nb_seq1:
                lignee.append('1')
            else:
                lignee.append('X')
            print("The lineage is being updated.")
            dico_afr[item]['lineage_PGG_cp'] = lignee
            if lignee == ['1', '1']:
                dico_afr[item]['lineage_PGG'] = '1'
            elif lignee in [['1', '2'], ['2', '1']]:
                dico_afr[item]['lineage_PGG'] = '2'
            elif lignee in [['2', '3'], ['3', '2']]:
                dico_afr[item]['lineage_PGG'] = '3'
            else:
                dico_afr[item]['lineage_PGG'] = 'X'

            # ==== TESTING LINEAGE COLL =======================================

            # If 'lineage_Coll' is undefined for {item} in dico_afr, we parse a
            # file containing Coll lineage SNPs to compare with chosen reads and
            # update dico_afr.
            if 'lineage_Coll' not in dico_afr[item] or \
                    dico_afr[item]['lineage_Coll'] == '':
                lignee = []
                print("We're adding the lineage according to the SNPs Coll")
                with open(P_CSV, 'r') as f:
                    csv_reader = reader(f, delimiter=',', quotechar='"')
                    next(csv_reader)
                    for row in csv_reader:
                        if row[16] == 'Coll' and row[1] != '':
                            pos = int(row[1].strip()) - 1
                            assert H37RV[pos] == row[3].strip().split('/')[0]
                            seq1 = H37RV[pos - DEMI_LONGUEUR:pos +
                                                             DEMI_LONGUEUR + 1]

                            if '*' not in row[0].strip():
                                seq2 = seq1[:20] + row[3].strip().split('/')[
                                    1] + seq1[21:]
                            else:
                                seq1 = seq1[:20] + row[3].strip().split('/')[
                                    1] + seq1[21:]
                                seq2 = seq1[:20] + row[3].strip().split('/')[
                                    0] + seq1[21:]

                            formatted_results = to_formatted_results(seq2,
                                                                     repitem, 8)

                            nb_seq1 = to_nb_seq(seq1, formatted_results, 16, 20,
                                                21, 25)
                            nb_seq2 = to_nb_seq(seq2, formatted_results, 16, 20,
                                                21, 25)

                            if nb_seq2 > nb_seq1:
                                lignee.append(row[0].strip().replace(
                                    'lineage', '').replace('*', ''))
                    lignee = sorted(set(lignee))
                    dico_afr[item]['lineage_Coll'] = lignee

        # ==== TESTING PALI LINEAGE =============================

        """
        - we browse the dictionary of a lineage Pali, Shitikov or Stucki,
          and pick 2 reads (seq1 and seq2) per value of the dictionary,
        - we open the 'snp.fasta' file and write on it the 2nd read from before,
        - we blast the SRA from 'snp.fasta' in relation to the 'item',
        - we keep only the results that contain selected parts of the reads
          seq1 and seq2, and put them in sequences,
        - we assign the length of those sequences to nb_seq1 and nb_seq2,
        - we create an empty list called 'lignee'
        - if nb_seq2 is greater than nb_seq1, then we add the 3rd read from
          the initial dictionary to 'lignee',
        - we sort the elements of 'lignee' and add them to dico_afr[item][
          'lineage...']
        """
        # If dico_afr has no information about 'lineage_Pali' regarding {item}
        # we extract data from Palittapon_SNPs.xlsx into the dictionary
        # Lignee_Pali containing positions, reads and lineage numbers, we
        # select several reads seq1 and several reads seq2 in a specific
        # position before blasting them and updating the lineage in dico_afr[SRA]
        if 'lineage_Pali' not in dico_afr[item]:
            lignee = []
            Lignee_SNP = to_reads('Pali', H37RV)
            print("We're adding the lineage according to the SNPs Pali")

            for item2, pos0 in enumerate(Lignee_SNP):
                seq1, seq2 = Lignee_SNP[pos0][:2]
                p_blast = str(PurePath('CRISPRbuilder-TB', 'tmp',
                                       'snp_Pali.blast'))
                with open(P_FASTA, 'w') as f:
                    f.write('>\n' + seq2)
                cmd = "blastn -query " + P_FASTA + " -num_threads 12 -evalue " \
                          "1e-5 -task blastn -db " + repitem + " -outfmt '10 " \
                          "sseq' -out " + p_blast
                system(cmd)
                with open(p_blast) as f:
                    formatted_results = f.read().splitlines()

                nb_seq1 = to_nb_seq(seq1, formatted_results, 16, 20, 21, 25)
                nb_seq2 = to_nb_seq(seq2, formatted_results, 16, 20, 21, 25)

                if nb_seq2 > nb_seq1:
                    lignee.append(Lignee_SNP[pos0][2])

            lignee = [u for u in sorted(set(lignee))]

            dico_afr[item]['lineage_Pali'] = lignee

        # ==== TESTING SHITIKOV LINEAGE =================================

        # If dico_afr has no information about 'lineage_Shitikov' regarding the
        # SRA, we extract data from Shitikov_L2_SNPs.xlsx into the dictionary
        # Lignee_Shitikov containing positions, reads and lineage numbers, we
        # select a read in a specific position before blasting it and updating
        # the lineage in dico_afr[SRA].
        if 'lineage_Shitikov' not in dico_afr[item]:
            lignee = []
            Lignee_SNP = to_reads('Shiti', H37RV)
            print("We're adding the lineage according to the SNPs Shitikov")

            for item2, pos0 in enumerate(Lignee_SNP):
                seq1, seq2 = Lignee_SNP[pos0][:2]
                p_blast = str(PurePath('CRISPRbuilder-TB', 'tmp',
                                       'snp_Shitikov.blast'))
                with open(P_FASTA, 'w') as f:
                    f.write('>\n' + seq2)
                cmd = "blastn -query " + P_FASTA + " -num_threads 12 -evalue " \
                      "1e-5 -task blastn -db " + repitem + " -outfmt '10 sseq' " \
                      "-out " + p_blast
                system(cmd)
                with open(p_blast) as f:
                    formatted_results = f.read().splitlines()

                nb_seq1 = to_nb_seq(seq1, formatted_results, 16, 20, 21, 25)
                nb_seq2 = to_nb_seq(seq2, formatted_results, 16, 20, 21, 25)

                if nb_seq2 > nb_seq1:
                    lignee.append(Lignee_SNP[pos0][2])

            lignee = [u for u in sorted(set(lignee))]
            dico_afr[item]['lineage_Shitikov'] = lignee

        # ==== TESTING STUCKI LINEAGE ====================================

        # If dico_afr has no information about 'lineage-Stucki' regarding the
        # SRA, we extract data from Stucki_L4-SNPs.xlsx into the dictionary
        # Lignee_Stucki containing positions, reads and lineage numbers, we
        # select a read in a specific position before blasting it and updating
        # the lineage in dico_afr[SRA].
        if 'Lignee_Stucki' not in dico_afr[item]:
            lignee = []
            Lignee_SNP = to_reads('Stucki', H37RV)
            print("We're adding the lineage according to the SNPs Stucki")

            for item2, pos0 in enumerate(Lignee_SNP):
                seq1, seq2 = Lignee_SNP[pos0][:2]
                p_blast = str(PurePath('CRISPRbuilder-TB', 'tmp',
                                       'snp_Stucki.blast'))
                with open(P_FASTA, 'w') as f:
                    f.write('>\n' + seq2)
                cmd = "blastn -query " + P_FASTA + " -num_threads 12 -evalue " \
                      "1e-5 -task blastn -db " + repitem + " -outfmt '10 sseq' " \
                                                           "-out " + p_blast
                system(cmd)
                with open(p_blast) as f:
                    formatted_results = f.read().splitlines()

                nb_seq1 = to_nb_seq(seq1, formatted_results, 16, 20, 21, 25)
                nb_seq2 = to_nb_seq(seq2, formatted_results, 16, 20, 21, 25)

                if nb_seq2 > nb_seq1:
                    lignee.append(Lignee_SNP[pos0][2])

            lignee = [u for u in sorted(set(lignee))]

            if '4.10' in lignee:
                lignee.remove('4.10')
            else:
                lignee.append('4.10')

            dico_afr[item]['Lignee_Stucki'] = lignee

    # We check if {item} is in the database Origines, and update the location
    # of {item} in dico_afr[item]
    booleen_origines = False
    for k in Origines:
        if item in k['run accessions']:
            booleen_origines = True
            if 'location' in k:
                dico_afr[item]['location'] = k.get('location')
    if booleen_origines:
        print(f"{item} is in the database Origines")
    else:
        print(f"{item} is not in the database Origines")

    if item in dico_afr:
        dico_afr[item].setdefault('name', '')

        # If {item} is a metagenome, we delete it from dico_afr and delete the
        # repository in 'REP/sequences'.
        if 'metagenome' in dico_afr[item]['name'] and item in listdir(
                P_SEQUENCES):
            print(f"The item {item} is a metagenome. We delete it from the "
                  "database.")
            del dico_afr[item]
            try:
                rmtree(rep)
            except FileNotFoundError:
                print("The file couldn't be found in the repository.")

    # We display information regarding {item} if dico_afr wasn't deleted.
    if dico_afr:
        print('\n==== SUMMERY ====\n')
        for elt in dico_afr[item]:
            print(f"{elt}: {dico_afr[item][elt]}")

    # We empty the directory tmp
    if name == 'posix':
        system('rm -rf CRISPRbuilder-TB/tmp')
    else:
        print('windows')


# ==============
# MAIN PROCEDURE
# ==============


def main():
    """
    We define the different options for the user to choose (--collect, --list,
    --add, --remove, --change, --print).
    We change the 'lineage.csv' file if requested.
    We print the characteristics of a specific SRA reference or the
    characteristics of a list of SRA references.

    Returns:
        (None)
    """
    # ==== DEFINING THE OPTIONS TO CHOOSE =====================================

    # We ask the user for the option to choose
    mp = ArgumentParser(prog='CRISPRbuilder-TB', description="Collects and"
        " annotates Mycobacterium tuberculosis whole genome sequencing data for "
        "CRISPR investigation.")
    mp.add_argument("sra", type=str, help="requires the reference of a SRA, "
                    "the path to a file of SRA references or 0. See "
                    "documentation crisprbuilder-tb.md.")
    mp.add_argument("--collect", action='store_true', help="collects the "
                    "reference of a SRA to get information about this SRA. See "
                    "documentation crisprbuilder-tb.md.")
    mp.add_argument("--list", action='store_true', help="collects the path to a "
                    "file of SRA references to get information about. See "
                    "documentation crisprbuilder-tb.md.")
    mp.add_argument("--add", action='store_true', help="collects data to add to "
                    "the file lineage.csv. Requires 0 as argument. See "
                    "documentation crisprbuilder-tb.md.")
    mp.add_argument("--remove", action='store_true', help="removes data from the"
                    " file lineage.csv. Requires 0 as argument. See "
                    "documentation crisprbuilder.tb.md.")
    mp.add_argument("--change", action='store_true', help="collects data to "
                    "update the file lineage.csv. Requires 0 as argument. See "
                    "documentation crisprbuilder-tb.md.")
    mp.add_argument("--print", action='store_true', help="prints the file "
                    "lineage.csv. Requires 0 as argument. See documentation "
                                                         "crisprbuilder-tb.md.")
    args = mp.parse_args()

    # item represents the RSA reference
    valeur_option = args.sra

    # ==== WHEN THE SELECTED OPTION IS COLLECT ===============================

    if args.collect:
        collect_SRA(valeur_option)

    # ==== WHEN THE SELECTED OPTION IS LIST =====================================

    # We read the content of the file valeur_option, transform it into a list
    # without spaces and \n symbols. We browse the list to apply collect_SRA().
    if args.list:
        with open(valeur_option, 'r') as f:
            chaine_SRA = f.read()
            liste_SRA = chaine_SRA.strip().split()
            liste_SRA = [elt.replace('\n', '') for elt in liste_SRA]
        for item in liste_SRA:
            collect_SRA(item.strip())

    # ==== WHEN THE SELECTED OPTION IS ADD =====================================

    # We collect data to append the file data/lineage.csv.
    if args.add:
        reponse = input("You're about to add a new content to the file "
                        "lineage.csv. Do you wish to proceed ? (y/n)")
        if reponse =='y':
            chaine_csv = input("Please fill in the various fields. If you don't "
                               "know the value of a specific field, press enter."
                               "\nLineage "
                                "?\n").strip()
            chaine_csv += ',' + input("Position ?\n").strip()
            chaine_csv += ',' + input("Gene coord. ?\n").strip()
            chaine_csv += ',' + input("Allele change ?\n").strip()
            chaine_csv += ',' + input("Codon number ?\n").strip()
            chaine_csv += ',' + input("Codon change ?\n").strip()
            chaine_csv += ',' + input("Amino acid change ?\n").strip()
            chaine_csv += ',' + input("Locus Id ?\n").strip()
            chaine_csv += ',' + input("Gene name ?\n").strip()
            chaine_csv += ',' + input("Gene type ?\n").strip()
            chaine_csv += ',' + input("Type of mutation ?\n").strip()
            chaine_csv += ',' + input("5' gene ?\n").strip()
            chaine_csv += ',' + input("3' gene ?\n").strip()
            chaine_csv += ',' + input("Strand ?\n").strip()
            chaine_csv += ',' + input("Sublineage surname ?\n").strip()
            chaine_csv += ',' + input("Essential ?\n").strip() + ',,'

            chaine_csv = chaine_csv.strip()
            liste_csv = chaine_csv.split(',')

            with open(P_CSV, 'a', newline='') as f:
                c = writer(f, delimiter=',', quotechar='"',
                               quoting=QUOTE_MINIMAL)
                c.writerow(liste_csv)
            print("The line has  added.")
        else:
            print("Your request was cancelled")

    # ==== WHEN THE SELECTED OPTION IS PRINT ==================================

    # We print the file data/lineage.csv
    if args.print:
        print("Here is the content of the file data/lineage.csv:\n")
        with open(P_CSV, 'r', newline='') as f:
            csv_reader = reader(f, delimiter=',', quotechar='"')
            for row in csv_reader:
                print(', '.join(row))

    # ==== WHEN THE SELECTED OPTION IS REMOVE =================================

    # We select the line to change, create a new file lineage2.csv to record all
    # the data from lineage.csv except for the selected line. Then we rename
    # lineage2.csv to lineage.csv.
    if args.remove:
        reponse = input("You're about to remove a content from the file "
                        "lineage.csv. Do you wish to proceed ? (y/n)")
        if reponse == 'y':
            ligne_lineage_csv = input("Which lineage would you like to delete "
                                      "?\n")
            ligne_pos_csv = input("Confirm the position in this lineage you "
                                  "would like to delete:\n")
            with open(P_CSV, 'r', newline='') as csvin, \
                    open(P_CSV_TMP, 'w', newline='') as csvout:
                csv_reader = reader(csvin, delimiter=',', quotechar='"',
                                    quoting=QUOTE_MINIMAL)
                csv_writer = writer(csvout, delimiter=',', quotechar='"',
                                    quoting=QUOTE_MINIMAL)
                for row in csv_reader:
                    if row[0].strip() != ligne_lineage_csv or \
                            row[1].strip() != ligne_pos_csv:
                        csv_writer.writerow(row)
            remove(P_CSV)
            rename(P_CSV_TMP, P_CSV)
            print("The line has been removed.")
        else:
            print("Your request was cancelled.")

    # ==== WHEN THE SELECTED OPTION IS CHANGE =================================

    # We collect data to update the file lineage.csv, select the line to change,
    # create a new file lineage2.csv to record all the data from lineage.csv
    # except for the selected line where we add the collected data. Then we
    # rename lineage2.csv to lineage.csv.
    if args.change:
        reponse = input("You're about to change the content from the file "
                        "lineage.csv. Do you wish to proceed ? (y/n)")
        if reponse == 'y':
            ligne_lineage_csv = input("Which lineage would you like to change "
                                      "?\n")
            ligne_pos_csv = input("Confirm the position in this lineage you "
                                  "would like to make change:\n")
            chaine_csv = input("Please fill in the various fields. If you don't "
                               "know the value of a specific field, press enter."
                               "\nLineage "
                               "?\n").strip()
            chaine_csv += ',' + input("Position ?\n").strip()
            chaine_csv += ',' + input("Gene coord. ?\n").strip()
            chaine_csv += ',' + input("Allele change ?\n").strip()
            chaine_csv += ',' + input("Codon number ?\n").strip()
            chaine_csv += ',' + input("Codon change ?\n").strip()
            chaine_csv += ',' + input("Amino acid change ?\n").strip()
            chaine_csv += ',' + input("Locus Id ?\n").strip()
            chaine_csv += ',' + input("Gene name ?\n").strip()
            chaine_csv += ',' + input("Gene type ?\n").strip()
            chaine_csv += ',' + input("Type of mutation ?\n").strip()
            chaine_csv += ',' + input("5' gene ?\n").strip()
            chaine_csv += ',' + input("3' gene ?\n").strip()
            chaine_csv += ',' + input("Strand ?\n").strip()
            chaine_csv += ',' + input("Sublineage surname ?\n").strip()
            chaine_csv += ',' + input("Essential ?\n").strip() + ',,'
            chaine_csv = chaine_csv.strip()
            liste_csv = chaine_csv.split(',')

            with open(P_CSV, 'r', newline='') as csvin, \
                    open(P_CSV_TMP, 'w', newline='') as csvout:
                csv_reader = reader(csvin, delimiter=',', quotechar='"',
                                    quoting=QUOTE_MINIMAL)
                csv_writer = writer(csvout, delimiter=',', quotechar='"',
                                    quoting=QUOTE_MINIMAL)
                for row in csv_reader:
                    if row[0].strip() != ligne_lineage_csv or \
                            row[1].strip() != ligne_pos_csv:
                        csv_writer.writerow(row)
                    else:
                        csv_writer.writerow(liste_csv)
            remove(P_CSV)
            rename(P_CSV_TMP, P_CSV)
            print("The line has been changed.")
        else:
            print("Your request was cancelled.")

if __name__ == "__main__":
    main()